/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/lib/canvasRenderingContext2DExtensions.js":
/*!******************************************************!*\
  !*** ./js/lib/canvasRenderingContext2DExtensions.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("CanvasRenderingContext2D.prototype.storeLoadedImage = function (key, image) {\n  if (!this.images) {\n    this.images = {};\n  }\n\n  this.images[key] = image;\n};\n\nCanvasRenderingContext2D.prototype.getLoadedImage = function (key) {\n  if (this.images[key]) {\n    return this.images[key];\n  }\n};\n\nCanvasRenderingContext2D.prototype.followSprite = function (sprite) {\n  this.centralSprite = sprite;\n};\n\nCanvasRenderingContext2D.prototype.getCentralPosition = function () {\n  return {\n    map: this.centralSprite.mapPosition,\n    canvas: [Math.round(this.canvas.width * 0.5), Math.round(this.canvas.height * 0.5), 0]\n  };\n};\n\nCanvasRenderingContext2D.prototype.mapPositionToCanvasPosition = function (position) {\n  var central = this.getCentralPosition();\n  var centralMapPosition = central.map;\n  var centralCanvasPosition = central.canvas;\n  var mapDifferenceX = centralMapPosition[0] - position[0];\n  var mapDifferenceY = centralMapPosition[1] - position[1];\n  return [centralCanvasPosition[0] - mapDifferenceX, centralCanvasPosition[1] - mapDifferenceY];\n};\n\nCanvasRenderingContext2D.prototype.canvasPositionToMapPosition = function (position) {\n  var central = this.getCentralPosition();\n  var centralMapPosition = central.map;\n  var centralCanvasPosition = central.canvas;\n  var mapDifferenceX = centralCanvasPosition[0] - position[0];\n  var mapDifferenceY = centralCanvasPosition[1] - position[1];\n  return [centralMapPosition[0] - mapDifferenceX, centralMapPosition[1] - mapDifferenceY];\n};\n\nCanvasRenderingContext2D.prototype.getCentreOfViewport = function () {\n  return (this.canvas.width / 2).floor();\n}; // Y-pos canvas functions\n\n\nCanvasRenderingContext2D.prototype.getMiddleOfViewport = function () {\n  return (this.canvas.height / 2).floor();\n};\n\nCanvasRenderingContext2D.prototype.getBelowViewport = function () {\n  return this.canvas.height.floor();\n};\n\nCanvasRenderingContext2D.prototype.getMapBelowViewport = function () {\n  var below = this.getBelowViewport();\n  return this.canvasPositionToMapPosition([0, below])[1];\n};\n\nCanvasRenderingContext2D.prototype.getRandomlyInTheCentreOfCanvas = function (buffer) {\n  var min = 0;\n  var max = this.canvas.width;\n\n  if (buffer) {\n    min -= buffer;\n    max += buffer;\n  }\n\n  return Number.random(min, max);\n};\n\nCanvasRenderingContext2D.prototype.getRandomlyInTheCentreOfMap = function (buffer) {\n  var random = this.getRandomlyInTheCentreOfCanvas(buffer);\n  return this.canvasPositionToMapPosition([random, 0])[0];\n};\n\nCanvasRenderingContext2D.prototype.getRandomMapPositionBelowViewport = function () {\n  var xCanvas = this.getRandomlyInTheCentreOfCanvas();\n  var yCanvas = this.getBelowViewport();\n  return this.canvasPositionToMapPosition([xCanvas, yCanvas]);\n};\n\nCanvasRenderingContext2D.prototype.getRandomMapPositionAboveViewport = function () {\n  var xCanvas = this.getRandomlyInTheCentreOfCanvas();\n  var yCanvas = this.getAboveViewport();\n  return this.canvasPositionToMapPosition([xCanvas, yCanvas]);\n};\n\nCanvasRenderingContext2D.prototype.getTopOfViewport = function () {\n  return this.canvasPositionToMapPosition([0, 0])[1];\n};\n\nCanvasRenderingContext2D.prototype.getAboveViewport = function () {\n  return 0 - (this.canvas.height / 4).floor();\n};\n\n//# sourceURL=webpack:///./js/lib/canvasRenderingContext2DExtensions.js?");

/***/ }),

/***/ "./js/lib/extenders.js":
/*!*****************************!*\
  !*** ./js/lib/extenders.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Extends function so that new-able objects can be given new methods easily\nFunction.prototype.method = function (name, func) {\n  this.prototype[name] = func;\n  return this;\n}; // Will return the original method of an object when inheriting from another\n\n\nObject.method('superior', function (name) {\n  var that = this;\n  var method = that[name];\n  return function () {\n    return method.apply(that, arguments);\n  };\n});\n\n//# sourceURL=webpack:///./js/lib/extenders.js?");

/***/ }),

/***/ "./js/lib/game.js":
/*!************************!*\
  !*** ./js/lib/game.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _spriteArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./spriteArray */ \"./js/lib/spriteArray.js\");\n/* harmony import */ var eventedloop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventedloop */ \"./node_modules/eventedloop/lib/main.js\");\n/* harmony import */ var eventedloop__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(eventedloop__WEBPACK_IMPORTED_MODULE_1__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar Game = /*#__PURE__*/function () {\n  function Game(mainCanvas, player) {\n    _classCallCheck(this, Game);\n\n    this.mainCanvas = mainCanvas;\n    this.player = player;\n    this.staticObjects = new _spriteArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.movingObjects = new _spriteArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.uiElements = new _spriteArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.dContext = this.mainCanvas.getContext('2d');\n    this.mouseX = this.dContext.getCentreOfViewport();\n    this.mouseY = 0;\n    this.paused = false;\n    this.beforeCycleCallbacks = [];\n    this.afterCycleCallbacks = [];\n    this.gameLoop = new eventedloop__WEBPACK_IMPORTED_MODULE_1___default.a();\n    this.player.setMapPosition(0, 0);\n    this.player.setMapPositionTarget(0, -10);\n    this.dContext.followSprite(this.player);\n    this.intervalNum = 0;\n    this.gameLoop.on('20', this.cycle.bind(this));\n    this.gameLoop.on('20', this.draw.bind(this));\n  }\n\n  _createClass(Game, [{\n    key: \"addStaticObject\",\n    value: function addStaticObject(sprite) {\n      this.staticObjects.push(sprite);\n    }\n  }, {\n    key: \"addStaticObjects\",\n    value: function addStaticObjects(sprites) {\n      sprites.forEach(this.addStaticObject.bind(this));\n    }\n  }, {\n    key: \"addMovingObject\",\n    value: function addMovingObject(movingObject, movingObjectType) {\n      if (movingObjectType) {\n        this.staticObjects.onPush(function (obj) {\n          if (obj.data && obj.data.hitBehaviour[movingObjectType]) {\n            obj.onHitting(movingObject, obj.data.hitBehaviour[movingObjectType]);\n          }\n        }, true);\n      }\n\n      this.movingObjects.push(movingObject);\n    }\n  }, {\n    key: \"addUIElement\",\n    value: function addUIElement(element) {\n      this.uiElements.push(element);\n    }\n  }, {\n    key: \"beforeCycle\",\n    value: function beforeCycle(callback) {\n      this.beforeCycleCallbacks.push(callback);\n    }\n  }, {\n    key: \"afterCycle\",\n    value: function afterCycle(callback) {\n      this.afterCycleCallbacks.push(callback);\n    }\n  }, {\n    key: \"setMouseX\",\n    value: function setMouseX(x) {\n      this.mouseX = x;\n    }\n  }, {\n    key: \"setMouseY\",\n    value: function setMouseY(y) {\n      this.mouseY = y;\n    }\n  }, {\n    key: \"cycle\",\n    value: function cycle() {\n      var _this = this;\n\n      this.beforeCycleCallbacks.each(function (c) {\n        c();\n      }); // Clear canvas\n\n      var mouseMapPosition = this.dContext.canvasPositionToMapPosition([this.mouseX, this.mouseY]);\n\n      if (!this.player.isJumping) {\n        this.player.setMapPositionTarget(mouseMapPosition[0], mouseMapPosition[1]);\n      }\n\n      this.intervalNum++;\n      this.player.cycle();\n      this.movingObjects.each(function (movingObject) {\n        movingObject.cycle(_this.dContext);\n      });\n      this.staticObjects.cull();\n      this.staticObjects.each(function (staticObject) {\n        if (staticObject.cycle) {\n          staticObject.cycle();\n        }\n      });\n      this.uiElements.each(function (uiElement) {\n        if (uiElement.cycle) {\n          uiElement.cycle();\n        }\n      });\n      this.afterCycleCallbacks.each(function (c) {\n        c();\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var _this2 = this;\n\n      // Clear canvas\n      this.mainCanvas.width = this.mainCanvas.width;\n      this.player.draw(this.dContext);\n      this.player.cycle();\n      this.movingObjects.each(function (movingObject, i) {\n        movingObject.draw(_this2.dContext);\n      });\n      this.staticObjects.each(function (staticObject, i) {\n        if (staticObject.draw) {\n          staticObject.draw(_this2.dContext, 'main');\n        }\n      });\n      this.uiElements.each(function (uiElement, i) {\n        if (uiElement.draw) {\n          uiElement.draw(_this2.dContext, 'main');\n        }\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.gameLoop.start();\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.paused = true;\n      this.gameLoop.stop();\n    }\n  }, {\n    key: \"isPaused\",\n    value: function isPaused() {\n      return this.paused;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      paused = false;\n      staticObjects = new _spriteArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n      movingObjects = new _spriteArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n      mouseX = dContext.getCentreOfViewport();\n      mouseY = 0;\n      player.reset();\n      player.setMapPosition(0, 0, 0);\n      this.start();\n    }\n  }]);\n\n  return Game;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Game);\n\n//# sourceURL=webpack:///./js/lib/game.js?");

/***/ }),

/***/ "./js/lib/guid.js":
/*!************************!*\
  !*** ./js/lib/guid.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Creates a random ID string\n(function (global) {\n  function guid() {\n    var S4 = function S4() {\n      return Math.floor(Math.random() * 0x10000\n      /* 65536 */\n      ).toString(16);\n    };\n\n    return S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\n  }\n\n  global.guid = guid;\n})(this);\n\nif (true) {\n  module.exports = this.guid;\n}\n\n//# sourceURL=webpack:///./js/lib/guid.js?");

/***/ }),

/***/ "./js/lib/infoBox.js":
/*!***************************!*\
  !*** ./js/lib/infoBox.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function InfoBox(data) {\n  var that = this;\n  that.lines = data.initialLines;\n  that.top = data.position.top;\n  that.right = data.position.right;\n  that.bottom = data.position.bottom;\n  that.left = data.position.left;\n  that.width = data.width;\n  that.height = data.height;\n\n  that.setLines = function (lines) {\n    that.lines = lines;\n  };\n\n  that.draw = function (dContext) {\n    dContext.font = '11px monospace';\n    var yOffset = 0;\n    that.lines.each(function (line) {\n      var fontSize = +dContext.font.slice(0, 2);\n      var textWidth = dContext.measureText(line).width;\n      var textHeight = fontSize * 1.5;\n      var xPos, yPos;\n\n      if (that.top) {\n        yPos = that.top + yOffset;\n      } else if (that.bottom) {\n        yPos = dContext.canvas.height - that.top - textHeight + yOffset;\n      }\n\n      if (that.right) {\n        xPos = dContext.canvas.width - that.right - textWidth;\n      } else if (that.left) {\n        xPos = that.left;\n      }\n\n      yOffset += textHeight;\n      dContext.fillText(line, xPos, yPos);\n    });\n  };\n\n  return that;\n}\n\nif (true) {\n  module.exports = InfoBox;\n}\n\n//# sourceURL=webpack:///./js/lib/infoBox.js?");

/***/ }),

/***/ "./js/lib/isMobileDevice.js":
/*!**********************************!*\
  !*** ./js/lib/isMobileDevice.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function isMobileDevice() {\n  if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = isMobileDevice;\n\n//# sourceURL=webpack:///./js/lib/isMobileDevice.js?");

/***/ }),

/***/ "./js/lib/monster.js":
/*!***************************!*\
  !*** ./js/lib/monster.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sprite */ \"./js/lib/sprite.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar Monster = /*#__PURE__*/function (_Sprite) {\n  _inherits(Monster, _Sprite);\n\n  var _super = _createSuper(Monster);\n\n  function Monster(data) {\n    var _this;\n\n    _classCallCheck(this, Monster);\n\n    _this = _super.call(this, data);\n    _this.spriteVersion = 1;\n    _this.eatingStage = 0;\n    _this.standardSpeed = 6;\n    _this.isEating = false;\n    _this.isFull = false;\n\n    _this.setSpeed(_this.standardSpeed);\n\n    return _this;\n  }\n\n  _createClass(Monster, [{\n    key: \"draw\",\n    value: function draw(dContext) {\n      var _this2 = this;\n\n      var spritePartToUse = function spritePartToUse() {\n        var xDiff = _this2.movingToward[0] - _this2.canvasX;\n\n        if (_this2.isEating) {\n          return 'eating' + eatingStage;\n        }\n\n        if (_this2.spriteVersion + 0.1 > 2) {\n          _this2.spriteVersion = 0.1;\n        } else {\n          _this2.spriteVersion += 0.1;\n        }\n\n        if (xDiff >= 0) {\n          return 'sEast' + Math.ceil(_this2.spriteVersion);\n        } else if (xDiff < 0) {\n          return 'sWest' + Math.ceil(_this2.spriteVersion);\n        }\n      };\n\n      return _get(_getPrototypeOf(Monster.prototype), \"draw\", this).call(this, dContext, spritePartToUse());\n    }\n  }, {\n    key: \"startEating\",\n    value: function (_startEating) {\n      function startEating(_x) {\n        return _startEating.apply(this, arguments);\n      }\n\n      startEating.toString = function () {\n        return _startEating.toString();\n      };\n\n      return startEating;\n    }(function (whenDone) {\n      this.eatingStage += 1;\n      this.isEating = true;\n      this.isMoving = false;\n\n      if (eatingStage < 6) {\n        setTimeout(function () {\n          startEating(whenDone);\n        }, 300);\n      } else {\n        eatingStage = 0;\n        this.isEating = false;\n        this.isMoving = true;\n        whenDone();\n      }\n    })\n  }]);\n\n  return Monster;\n}(_sprite__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Monster);\n\n//# sourceURL=webpack:///./js/lib/monster.js?");

/***/ }),

/***/ "./js/lib/plugins.js":
/*!***************************!*\
  !*** ./js/lib/plugins.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Avoid `console` errors in browsers that lack a console.\n(function () {\n  var method;\n\n  var noop = function noop() {};\n\n  var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];\n  var length = methods.length;\n  var console = window.console = window.console || {};\n\n  while (length--) {\n    method = methods[length]; // Only stub undefined methods.\n\n    if (!console[method]) {\n      console[method] = noop;\n    }\n  }\n})();\n\n//# sourceURL=webpack:///./js/lib/plugins.js?");

/***/ }),

/***/ "./js/lib/skier.js":
/*!*************************!*\
  !*** ./js/lib/skier.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sprite */ \"./js/lib/sprite.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nif (typeof navigator !== 'undefined') {\n  navigator.vibrate = navigator.vibrate || navigator.webkitVibrate || navigator.mozVibrate || navigator.msVibrate;\n} else {\n  navigator = {\n    vibrate: false\n  };\n}\n\nvar Skier = /*#__PURE__*/function (_Sprite) {\n  _inherits(Skier, _Sprite);\n\n  var _super = _createSuper(Skier);\n\n  function Skier(data) {\n    var _this;\n\n    _classCallCheck(this, Skier);\n\n    _this = _super.call(this, data);\n    _this.discreteDirections = {\n      'west': 270,\n      'wsWest': 240,\n      'sWest': 195,\n      'south': 180,\n      'sEast': 165,\n      'esEast': 120,\n      'east': 90\n    };\n    _this.sup = {\n      draw: _this.superior('draw'),\n      cycle: _this.superior('cycle'),\n      getSpeedX: _this.superior('getSpeedX'),\n      getSpeedY: _this.superior('getSpeedY'),\n      hits: _this.superior('hits')\n    };\n    _this.directions = {\n      esEast: function esEast(xDiff) {\n        return xDiff > 300;\n      },\n      sEast: function sEast(xDiff) {\n        return xDiff > 75;\n      },\n      wsWest: function wsWest(xDiff) {\n        return xDiff < -300;\n      },\n      sWest: function sWest(xDiff) {\n        return xDiff < -75;\n      }\n    };\n    _this.cancelableStateTimeout;\n    _this.cancelableStateInterval;\n    _this.canSpeedBoost = true;\n    _this.obstaclesHit = [];\n    _this.pixelsTravelled = 0;\n    _this.standardSpeed = 5;\n    _this.boostMultiplier = 2;\n    _this.turnEaseCycles = 70;\n    _this.speedX = 0;\n    _this.speedXFactor = 0;\n    _this.speedY = 0;\n    _this.speedYFactor = 1;\n    _this.trickStep = 0; // There are three of these\n\n    _this.isMoving = true;\n    _this.hasBeenHit = false;\n    _this.isJumping = false;\n    _this.isPerformingTrick = false;\n\n    _this.onHitObstacleCb = function () {};\n\n    _this.setSpeed(_this.standardSpeed);\n\n    return _this;\n  }\n\n  _createClass(Skier, [{\n    key: \"reset\",\n    value: function reset() {\n      this.obstaclesHit = [];\n      this.pixelsTravelled = 0;\n      this.isMoving = true;\n      this.isJumping = false;\n      this.hasBeenHit = false;\n      this.canSpeedBoost = true;\n    }\n  }, {\n    key: \"setNormal\",\n    value: function setNormal() {\n      // console.log('back to normal')\n      this.setSpeed(this.standardSpeed);\n      this.isMoving = true;\n      this.hasBeenHit = false;\n      this.isJumping = false;\n      this.isPerformingTrick = false;\n\n      if (this.cancelableStateInterval) {\n        clearInterval(this.cancelableStateInterval);\n      }\n\n      this.setMapPosition(undefined, undefined, 0);\n    }\n  }, {\n    key: \"setCrashed\",\n    value: function setCrashed() {\n      this.isMoving = false;\n      this.hasBeenHit = true;\n      this.isJumping = false;\n      this.isPerformingTrick = false;\n\n      if (this.cancelableStateInterval) {\n        clearInterval(this.cancelableStateInterval);\n      }\n\n      this.setMapPosition(undefined, undefined, 0);\n    }\n  }, {\n    key: \"setJumping\",\n    value: function setJumping() {\n      var currentSpeed = this.getSpeed();\n      this.setSpeed(currentSpeed + 2);\n      this.setSpeedY(currentSpeed + 2);\n      this.isMoving = true;\n      this.hasBeenHit = false;\n      this.isJumping = true;\n      this.setMapPosition(undefined, undefined, 1);\n    }\n  }, {\n    key: \"getDiscreteDirection\",\n    value: function getDiscreteDirection() {\n      if (this.direction) {\n        if (this.direction <= 90) {\n          return 'east';\n        } else if (this.direction > 90 && this.direction < 150) {\n          return 'esEast';\n        } else if (this.direction >= 150 && this.direction < 180) {\n          return 'sEast';\n        } else if (this.direction === 180) {\n          return 'south';\n        } else if (this.direction > 180 && this.direction <= 210) {\n          return 'sWest';\n        } else if (this.direction > 210 && this.direction < 270) {\n          return 'wsWest';\n        } else if (this.direction >= 270) {\n          return 'west';\n        } else {\n          return 'south';\n        }\n      } else {\n        var xDiff = this.movingToward[0] - this.mapPosition[0];\n        var yDiff = this.movingToward[1] - this.mapPosition[1];\n\n        if (yDiff <= 0) {\n          if (xDiff > 0) {\n            return 'east';\n          } else {\n            return 'west';\n          }\n        }\n\n        if (this.directions.esEast(xDiff)) {\n          return 'esEast';\n        } else if (this.directions.sEast(xDiff)) {\n          return 'sEast';\n        } else if (this.directions.wsWest(xDiff)) {\n          return 'wsWest';\n        } else if (this.directions.sWest(xDiff)) {\n          return 'sWest';\n        }\n      }\n\n      return 'south';\n    }\n  }, {\n    key: \"setDiscreteDirection\",\n    value: function setDiscreteDirection(d) {\n      if (this.discreteDirections[d]) {\n        this.setDirection(this.discreteDirections[d]);\n      }\n\n      if (d === 'west' || d === 'east') {\n        this.isMoving = false;\n      } else {\n        this.isMoving = true;\n      }\n    }\n  }, {\n    key: \"getBeingEatenSprite\",\n    value: function getBeingEatenSprite() {\n      return 'blank';\n    }\n  }, {\n    key: \"getJumpingSprite\",\n    value: function getJumpingSprite() {\n      return 'jumping';\n    }\n  }, {\n    key: \"getTrickSprite\",\n    value: function getTrickSprite() {\n      console.log('Trick step is', this.trickStep);\n\n      if (this.trickStep === 0) {\n        return 'jumping';\n      } else if (this.trickStep === 1) {\n        return 'somersault1';\n      } else {\n        return 'somersault2';\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.direction > 180) {\n        this.setDiscreteDirection('west');\n      } else {\n        this.setDiscreteDirection('east');\n      }\n    }\n  }, {\n    key: \"turnEast\",\n    value: function turnEast() {\n      var discreteDirection = this.getDiscreteDirection();\n\n      switch (discreteDirection) {\n        case 'west':\n          this.setDiscreteDirection('wsWest');\n          break;\n\n        case 'wsWest':\n          this.setDiscreteDirection('sWest');\n          break;\n\n        case 'sWest':\n          this.setDiscreteDirection('south');\n          break;\n\n        case 'south':\n          this.setDiscreteDirection('sEast');\n          break;\n\n        case 'sEast':\n          this.setDiscreteDirection('esEast');\n          break;\n\n        case 'esEast':\n          this.setDiscreteDirection('east');\n          break;\n\n        default:\n          this.setDiscreteDirection('south');\n          break;\n      }\n    }\n  }, {\n    key: \"turnWest\",\n    value: function turnWest() {\n      var discreteDirection = this.getDiscreteDirection();\n\n      switch (discreteDirection) {\n        case 'east':\n          this.setDiscreteDirection('esEast');\n          break;\n\n        case 'esEast':\n          this.setDiscreteDirection('sEast');\n          break;\n\n        case 'sEast':\n          this.setDiscreteDirection('south');\n          break;\n\n        case 'south':\n          this.setDiscreteDirection('sWest');\n          break;\n\n        case 'sWest':\n          this.setDiscreteDirection('wsWest');\n          break;\n\n        case 'wsWest':\n          this.setDiscreteDirection('west');\n          break;\n\n        default:\n          this.setDiscreteDirection('south');\n          break;\n      }\n    }\n  }, {\n    key: \"stepWest\",\n    value: function stepWest() {\n      this.mapPosition[0] -= this.speed * 2;\n    }\n  }, {\n    key: \"stepEast\",\n    value: function stepEast() {\n      this.mapPosition[0] += this.speed * 2;\n    }\n  }, {\n    key: \"setMapPositionTarget\",\n    value: function setMapPositionTarget(x, y) {\n      if (this.hasBeenHit) return;\n\n      if (Math.abs(this.mapPosition[0] - x) <= 75) {\n        x = this.mapPosition[0];\n      }\n\n      this.movingToward = [x, y]; // this.resetDirection();\n    }\n  }, {\n    key: \"startMovingIfPossible\",\n    value: function startMovingIfPossible() {\n      if (!this.hasBeenHit && !this.isBeingEaten) {\n        this.isMoving = true;\n      }\n    }\n  }, {\n    key: \"setTurnEaseCycles\",\n    value: function setTurnEaseCycles(c) {\n      this.turnEaseCycles = c;\n    }\n  }, {\n    key: \"getPixelsTravelledDownMountain\",\n    value: function getPixelsTravelledDownMountain() {\n      return this.pixelsTravelled;\n    }\n  }, {\n    key: \"resetSpeed\",\n    value: function resetSpeed() {\n      this.setSpeed(this.standardSpeed);\n    }\n  }, {\n    key: \"cycle\",\n    value: function cycle() {\n      if (this.getSpeedX() <= 0 && this.getSpeedY() <= 0) {\n        this.isMoving = false;\n      }\n\n      if (this.isMoving) {\n        this.pixelsTravelled += this.speed;\n      }\n\n      if (this.isJumping) {\n        this.setMapPositionTarget(undefined, this.mapPosition[1] + this.getSpeed());\n      }\n\n      _get(_getPrototypeOf(Skier.prototype), \"cycle\", this).call(this);\n\n      this.checkHittableObjects();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(dContext) {\n      var _this2 = this;\n\n      var spritePartToUse = function spritePartToUse() {\n        if (_this2.isBeingEaten) {\n          return _this2.getBeingEatenSprite();\n        }\n\n        if (_this2.isJumping) {\n          if (_this2.isPerformingTrick) {\n            return _this2.getTrickSprite();\n          }\n\n          return _this2.getJumpingSprite();\n        }\n\n        if (_this2.hasBeenHit) {\n          return 'hit';\n        }\n\n        return _this2.getDiscreteDirection();\n      };\n\n      return _get(_getPrototypeOf(Skier.prototype), \"draw\", this).call(this, dContext, spritePartToUse());\n    }\n  }, {\n    key: \"hits\",\n    value: function hits(obs) {\n      if (this.obstaclesHit.indexOf(obs.id) !== -1) {\n        return false;\n      }\n\n      if (!obs.occupiesZIndex(this.mapPosition[2])) {\n        return false;\n      }\n\n      if (_get(_getPrototypeOf(Skier.prototype), \"hits\", this).call(this, obs)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"speedBoost\",\n    value: function speedBoost() {\n      var _this3 = this;\n\n      if (this.canSpeedBoost) {\n        var originalSpeed = this.getSpeed();\n        this.canSpeedBoost = false;\n        this.setSpeed(this.speed * this.boostMultiplier);\n        setTimeout(function () {\n          _this3.setSpeed(originalSpeed);\n\n          setTimeout(function () {\n            _this3.canSpeedBoost = true;\n          }, 10000);\n        }, 2000);\n      }\n    }\n  }, {\n    key: \"attemptTrick\",\n    value: function attemptTrick() {\n      var _this4 = this;\n\n      if (this.isJumping) {\n        this.isPerformingTrick = true;\n        this.cancelableStateInterval = setInterval(function () {\n          if (_this4.trickStep >= 2) {\n            _this4.trickStep = 0;\n          } else {\n            _this4.trickStep += 1;\n          }\n        }, 300);\n      }\n    }\n  }, {\n    key: \"getStandardSpeed\",\n    value: function getStandardSpeed() {\n      return this.standardSpeed;\n    }\n  }, {\n    key: \"easeSpeedToTargetUsingFactor\",\n    value: function easeSpeedToTargetUsingFactor(sp, targetSpeed, f) {\n      if (f === 0 || f === 1) {\n        return targetSpeed;\n      }\n\n      if (sp < targetSpeed) {\n        sp += this.getSpeed() * (f / this.turnEaseCycles);\n      }\n\n      if (sp > targetSpeed) {\n        sp -= this.getSpeed() * (f / this.turnEaseCycles);\n      }\n\n      return sp;\n    }\n  }, {\n    key: \"getSpeedX\",\n    value: function getSpeedX() {\n      if (this.getDiscreteDirection() === 'esEast' || this.getDiscreteDirection() === 'wsWest') {\n        this.speedXFactor = 0.5;\n        this.speedX = this.easeSpeedToTargetUsingFactor(this.speedX, this.getSpeed() * this.speedXFactor, this.speedXFactor);\n        return this.speedX;\n      }\n\n      if (this.getDiscreteDirection() === 'sEast' || this.getDiscreteDirection() === 'sWest') {\n        this.speedXFactor = 0.33;\n        this.speedX = this.easeSpeedToTargetUsingFactor(this.speedX, this.getSpeed() * this.speedXFactor, this.speedXFactor);\n        return this.speedX;\n      } // So it must be south\n\n\n      this.speedX = this.easeSpeedToTargetUsingFactor(this.speedX, 0, this.speedXFactor);\n      return this.speedX;\n    }\n  }, {\n    key: \"setSpeedY\",\n    value: function setSpeedY(sy) {\n      this.speedY = sy;\n    }\n  }, {\n    key: \"getSpeedY\",\n    value: function getSpeedY() {\n      var targetSpeed;\n\n      if (this.isJumping) {\n        return this.speedY;\n      }\n\n      if (this.getDiscreteDirection() === 'esEast' || this.getDiscreteDirection() === 'wsWest') {\n        this.speedYFactor = 0.6;\n        this.speedY = this.easeSpeedToTargetUsingFactor(this.speedY, this.getSpeed() * 0.6, 0.6);\n        return this.speedY;\n      }\n\n      if (this.getDiscreteDirection() === 'sEast' || this.getDiscreteDirection() === 'sWest') {\n        this.speedYFactor = 0.85;\n        this.speedY = this.easeSpeedToTargetUsingFactor(this.speedY, this.getSpeed() * 0.85, 0.85);\n        return this.speedY;\n      }\n\n      if (this.getDiscreteDirection() === 'east' || this.getDiscreteDirection() === 'west') {\n        this.speedYFactor = 1;\n        this.speedY = 0;\n        return this.speedY;\n      } // So it must be south\n\n\n      this.speedY = this.easeSpeedToTargetUsingFactor(this.speedY, this.getSpeed(), this.speedYFactor);\n      return this.speedY;\n    }\n  }, {\n    key: \"hasHitObstacle\",\n    value: function hasHitObstacle(obs) {\n      var _this5 = this;\n\n      this.setCrashed();\n\n      if (navigator.vibrate) {\n        navigator.vibrate(500);\n      }\n\n      this.obstaclesHit.push(obs.id);\n      this.resetSpeed();\n      this.onHitObstacleCb(obs);\n\n      if (this.cancelableStateTimeout) {\n        clearTimeout(this.cancelableStateTimeout);\n      }\n\n      this.cancelableStateTimeout = setTimeout(function () {\n        _this5.setNormal();\n      }, 1500);\n    }\n  }, {\n    key: \"hasHitJump\",\n    value: function hasHitJump() {\n      var _this6 = this;\n\n      this.setJumping();\n\n      if (this.cancelableStateTimeout) {\n        clearTimeout(this.cancelableStateTimeout);\n      }\n\n      this.cancelableStateTimeout = setTimeout(function () {\n        _this6.setNormal();\n      }, 1000);\n    }\n  }, {\n    key: \"isEatenBy\",\n    value: function isEatenBy(monster, whenEaten) {\n      this.hasHitObstacle(monster);\n      monster.startEating(whenEaten);\n      this.obstaclesHit.push(monster.id);\n      this.isMoving = false;\n      this.isBeingEaten = true;\n    }\n  }, {\n    key: \"setHitObstacleCb\",\n    value: function setHitObstacleCb(fn) {\n      this.onHitObstacleCb = fn || function () {};\n    }\n  }]);\n\n  return Skier;\n}(_sprite__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Skier);\n\n//# sourceURL=webpack:///./js/lib/skier.js?");

/***/ }),

/***/ "./js/lib/snowboarder.js":
/*!*******************************!*\
  !*** ./js/lib/snowboarder.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sprite */ \"./js/lib/sprite.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar Snowboarder = /*#__PURE__*/function (_Sprite) {\n  _inherits(Snowboarder, _Sprite);\n\n  var _super = _createSuper(Snowboarder);\n\n  function Snowboarder(data) {\n    var _this;\n\n    _classCallCheck(this, Snowboarder);\n\n    _this = _super.call(this, data);\n    _this.directions = {\n      sEast: function sEast(xDiff) {\n        return xDiff > 0;\n      },\n      sWest: function sWest(xDiff) {\n        return xDiff <= 0;\n      }\n    };\n    var standardSpeed = 3;\n\n    _this.setSpeed(standardSpeed);\n\n    return _this;\n  }\n\n  _createClass(Snowboarder, [{\n    key: \"getDirection\",\n    value: function getDirection() {\n      var xDiff = this.movingToward[0] - this.mapPosition[0];\n\n      if (this.directions.sEast(xDiff)) {\n        return 'sEast';\n      } else {\n        return 'sWest';\n      }\n    }\n  }, {\n    key: \"cycle\",\n    value: function cycle(dContext) {\n      if (Number.random(10) === 1) {\n        this.setMapPositionTarget(dContext.getRandomlyInTheCentreOfMap());\n        this.setSpeed(this.standardSpeed + Number.random(-1, 1));\n      }\n\n      this.setMapPositionTarget(undefined, dContext.getMapBelowViewport() + 600);\n\n      _get(_getPrototypeOf(Snowboarder.prototype), \"cycle\", this).call(this);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(dContext) {\n      return _get(_getPrototypeOf(Snowboarder.prototype), \"draw\", this).call(this, dContext, this.getDirection());\n    }\n  }]);\n\n  return Snowboarder;\n}(_sprite__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Snowboarder);\n\n//# sourceURL=webpack:///./js/lib/snowboarder.js?");

/***/ }),

/***/ "./js/lib/sprite.js":
/*!**************************!*\
  !*** ./js/lib/sprite.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _guid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./guid */ \"./js/lib/guid.js\");\n/* harmony import */ var _guid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_guid__WEBPACK_IMPORTED_MODULE_0__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Sprite = /*#__PURE__*/function () {\n  function Sprite(data) {\n    _classCallCheck(this, Sprite);\n\n    this.data = data || {\n      parts: {}\n    };\n    this.hittableObjects = {};\n    this.zIndexesOccupied = [0];\n    this.trackedSpriteToMoveToward;\n    this.direction = undefined;\n    this.mapPosition = [0, 0, 0];\n    this.id = _guid__WEBPACK_IMPORTED_MODULE_0___default()();\n    this.canvasX = 0;\n    this.canvasY = 0;\n    this.canvasZ = 0;\n    this.height = 0;\n    this.speed = 0;\n    this.movingToward = [0, 0];\n    this.metresDownTheMountain = 0;\n    this.movingWithConviction = false;\n    this.deleted = false;\n    this.maxHeight = Object.values(this.data.parts).map(function (p) {\n      return p[3];\n    }).max();\n    this.isMoving = true;\n\n    if (!this.data.parts) {\n      this.data.parts = {};\n    }\n\n    if (this.data && this.data.id) {\n      this.id = this.data.id;\n    }\n\n    if (this.data && this.data.zIndexesOccupied) {\n      this.zIndexesOccupied = this.data.zIndexesOccupied;\n    }\n  }\n\n  _createClass(Sprite, [{\n    key: \"incrementX\",\n    value: function incrementX(amount) {\n      this.canvasX += amount.toNumber();\n    }\n  }, {\n    key: \"incrementY\",\n    value: function incrementY(amount) {\n      this.canvasY += amount.toNumber();\n    }\n  }, {\n    key: \"getHitBox\",\n    value: function getHitBox(forZIndex) {\n      if (this.data.hitBoxes) {\n        if (this.data.hitBoxes[forZIndex]) {\n          return this.data.hitBoxes[forZIndex];\n        }\n      }\n    }\n  }, {\n    key: \"roundHalf\",\n    value: function roundHalf(num) {\n      num = Math.round(num * 2) / 2;\n      return num;\n    }\n  }, {\n    key: \"move\",\n    value: function move() {\n      if (!this.isMoving) {\n        return;\n      }\n\n      var currentX = this.mapPosition[0];\n      var currentY = this.mapPosition[1];\n\n      if (typeof this.direction !== 'undefined') {\n        // For this we need to modify the this.direction so it relates to the horizontal\n        var d = this.direction - 90;\n        if (d < 0) d = 360 + d;\n        currentX += this.roundHalf(this.speed * Math.cos(d * (Math.PI / 180)));\n        currentY += this.roundHalf(this.speed * Math.sin(d * (Math.PI / 180)));\n      } else {\n        if (typeof this.movingToward[0] !== 'undefined') {\n          if (currentX > this.movingToward[0]) {\n            currentX -= Math.min(this.getSpeedX(), Math.abs(currentX - this.movingToward[0]));\n          } else if (currentX < this.movingToward[0]) {\n            currentX += Math.min(this.getSpeedX(), Math.abs(currentX - this.movingToward[0]));\n          }\n        }\n\n        if (typeof this.movingToward[1] !== 'undefined') {\n          if (currentY > this.movingToward[1]) {\n            currentY -= Math.min(this.getSpeedY(), Math.abs(currentY - this.movingToward[1]));\n          } else if (currentY < this.movingToward[1]) {\n            currentY += Math.min(this.getSpeedY(), Math.abs(currentY - this.movingToward[1]));\n          }\n        }\n      }\n\n      this.setMapPosition(currentX, currentY);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(dCtx, spriteFrame) {\n      var fr = this.data.parts[spriteFrame];\n      this.height = fr[3];\n      this.width = fr[2];\n      var newCanvasPosition = dCtx.mapPositionToCanvasPosition(this.mapPosition);\n      this.setCanvasPosition(newCanvasPosition[0], newCanvasPosition[1]);\n      dCtx.drawImage(dCtx.getLoadedImage(this.data.$imageFile), fr[0], fr[1], fr[2], fr[3], this.canvasX, this.canvasY, fr[2], fr[3]);\n    }\n  }, {\n    key: \"setMapPosition\",\n    value: function setMapPosition(x, y, z) {\n      if (typeof x === 'undefined') {\n        x = this.mapPosition[0];\n      }\n\n      if (typeof y === 'undefined') {\n        y = this.mapPosition[1];\n      }\n\n      if (typeof z === 'undefined') {\n        z = this.mapPosition[2];\n      } else {\n        this.zIndexesOccupied = [z];\n      }\n\n      this.mapPosition = [x, y, z];\n    }\n  }, {\n    key: \"setCanvasPosition\",\n    value: function setCanvasPosition(cx, cy) {\n      if (cx) {\n        if (Object.isString(cx) && (cx.first() === '+' || cx.first() === '-')) this.incrementX(cx);else this.canvasX = cx;\n      }\n\n      if (cy) {\n        if (Object.isString(cy) && (cy.first() === '+' || cy.first() === '-')) this.incrementY(cy);else this.canvasY = cy;\n      }\n    }\n  }, {\n    key: \"getCanvasPositionX\",\n    value: function getCanvasPositionX() {\n      return this.canvasX;\n    }\n  }, {\n    key: \"getCanvasPositionY\",\n    value: function getCanvasPositionY() {\n      return this.canvasY;\n    }\n  }, {\n    key: \"getLeftHitBoxEdge\",\n    value: function getLeftHitBoxEdge(zIndex) {\n      zIndex = zIndex || 0;\n      var lhbe = this.getCanvasPositionX();\n\n      if (this.getHitBox(zIndex)) {\n        lhbe += this.getHitBox(zIndex)[0];\n      }\n\n      return lhbe;\n    }\n  }, {\n    key: \"getTopHitBoxEdge\",\n    value: function getTopHitBoxEdge(zIndex) {\n      zIndex = zIndex || 0;\n      var thbe = this.getCanvasPositionY();\n\n      if (this.getHitBox(zIndex)) {\n        thbe += this.getHitBox(zIndex)[1];\n      }\n\n      return thbe;\n    }\n  }, {\n    key: \"getRightHitBoxEdge\",\n    value: function getRightHitBoxEdge(zIndex) {\n      zIndex = zIndex || 0;\n\n      if (this.getHitBox(zIndex)) {\n        return this.canvasX + this.getHitBox(zIndex)[2];\n      }\n\n      return this.canvasX + this.width;\n    }\n  }, {\n    key: \"getBottomHitBoxEdge\",\n    value: function getBottomHitBoxEdge(zIndex) {\n      zIndex = zIndex || 0;\n\n      if (this.getHitBox(zIndex)) {\n        return this.canvasY + this.getHitBox(zIndex)[3];\n      }\n\n      return this.canvasY + this.height;\n    }\n  }, {\n    key: \"getPositionInFrontOf\",\n    value: function getPositionInFrontOf() {\n      return [this.canvasX, this.canvasY + this.height];\n    }\n  }, {\n    key: \"setSpeed\",\n    value: function setSpeed(s) {\n      this.speed = s;\n      this.speedX = s;\n      this.speedY = s;\n    }\n  }, {\n    key: \"incrementSpeedBy\",\n    value: function incrementSpeedBy(s) {\n      this.speed += s;\n    }\n  }, {\n    key: \"getSpeed\",\n    value: function getSpeed() {\n      return this.speed;\n    }\n  }, {\n    key: \"getSpeedX\",\n    value: function getSpeedX() {\n      return this.speed;\n    }\n  }, {\n    key: \"getSpeedY\",\n    value: function getSpeedY() {\n      return this.speed;\n    }\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(h) {\n      this.height = h;\n    }\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(w) {\n      this.width = w;\n    }\n  }, {\n    key: \"getMaxHeight\",\n    value: function getMaxHeight() {\n      return this.maxHeight;\n    }\n  }, {\n    key: \"getMovingTowardOpposite\",\n    value: function getMovingTowardOpposite() {\n      if (!this.isMoving) {\n        return [0, 0];\n      }\n\n      var dx = this.movingToward[0] - this.mapPosition[0];\n      var dy = this.movingToward[1] - this.mapPosition[1];\n      var oppositeX = Math.abs(dx) > 75 ? 0 - dx : 0;\n      var oppositeY = -dy;\n      return [oppositeX, oppositeY];\n    }\n  }, {\n    key: \"checkHittableObjects\",\n    value: function checkHittableObjects() {\n      var _this = this;\n\n      Object.keys(this.hittableObjects, function (k, objectData) {\n        if (objectData.object.deleted) {\n          delete _this.hittableObjects[k];\n        } else {\n          if (objectData.object.hits(_this)) {\n            objectData.callbacks.each(function (callback) {\n              callback(this, objectData.object);\n            });\n          }\n        }\n      });\n    }\n  }, {\n    key: \"cycle\",\n    value: function cycle() {\n      this.checkHittableObjects();\n\n      if (this.trackedSpriteToMoveToward) {\n        this.setMapPositionTarget(this.trackedSpriteToMoveToward.mapPosition[0], this.trackedSpriteToMoveToward.mapPosition[1], true);\n      }\n\n      this.move();\n    }\n  }, {\n    key: \"setMapPositionTarget\",\n    value: function setMapPositionTarget(x, y, override) {\n      if (override) {\n        this.movingWithConviction = false;\n      }\n\n      if (!this.movingWithConviction) {\n        if (typeof x === 'undefined') {\n          x = this.movingToward[0];\n        }\n\n        if (typeof y === 'undefined') {\n          y = this.movingToward[1];\n        }\n\n        this.movingToward = [x, y];\n        this.movingWithConviction = false;\n      } // this.resetDirection();\n\n    }\n  }, {\n    key: \"setDirection\",\n    value: function setDirection(angle) {\n      if (angle >= 360) {\n        angle = 360 - angle;\n      }\n\n      this.direction = angle;\n      this.movingToward = undefined;\n    }\n  }, {\n    key: \"resetDirection\",\n    value: function resetDirection() {\n      this.direction = undefined;\n    }\n  }, {\n    key: \"setMapPositionTargetWithConviction\",\n    value: function setMapPositionTargetWithConviction(cx, cy) {\n      this.setMapPositionTarget(cx, cy);\n      this.movingWithConviction = true; // this.resetDirection();\n    }\n  }, {\n    key: \"follow\",\n    value: function follow(sprite) {\n      this.trackedSpriteToMoveToward = sprite; // this.resetDirection();\n    }\n  }, {\n    key: \"stopFollowing\",\n    value: function stopFollowing() {\n      this.trackedSpriteToMoveToward = false;\n    }\n  }, {\n    key: \"onHitting\",\n    value: function onHitting(objectToHit, callback) {\n      if (this.hittableObjects[objectToHit.id]) {\n        return this.hittableObjects[objectToHit.id].callbacks.push(callback);\n      }\n\n      this.hittableObjects[objectToHit.id] = {\n        object: objectToHit,\n        callbacks: [callback]\n      };\n    }\n  }, {\n    key: \"deleteOnNextCycle\",\n    value: function deleteOnNextCycle() {\n      this.deleted = true;\n    }\n  }, {\n    key: \"occupiesZIndex\",\n    value: function occupiesZIndex(z) {\n      return this.zIndexesOccupied.indexOf(z) >= 0;\n    }\n  }, {\n    key: \"hits\",\n    value: function hits(other) {\n      var verticalIntersect = false;\n      var horizontalIntersect = false; // Test this.THIS has a bottom edge inside of the other object\n\n      if (other.getTopHitBoxEdge(this.mapPosition[2]) <= this.getBottomHitBoxEdge(this.mapPosition[2]) && other.getBottomHitBoxEdge(this.mapPosition[2]) >= this.getBottomHitBoxEdge(this.mapPosition[2])) {\n        verticalIntersect = true;\n      } // Test this.THIS has a top edge inside of the other object\n\n\n      if (other.getTopHitBoxEdge(this.mapPosition[2]) <= this.getTopHitBoxEdge(this.mapPosition[2]) && other.getBottomHitBoxEdge(this.mapPosition[2]) >= this.getTopHitBoxEdge(this.mapPosition[2])) {\n        verticalIntersect = true;\n      } // Test this.THIS has a right edge inside of the other object\n\n\n      if (other.getLeftHitBoxEdge(this.mapPosition[2]) <= this.getRightHitBoxEdge(this.mapPosition[2]) && other.getRightHitBoxEdge(this.mapPosition[2]) >= this.getRightHitBoxEdge(this.mapPosition[2])) {\n        horizontalIntersect = true;\n      } // Test this.THIS has a left edge inside of the other object\n\n\n      if (other.getLeftHitBoxEdge(this.mapPosition[2]) <= this.getLeftHitBoxEdge(this.mapPosition[2]) && other.getRightHitBoxEdge(this.mapPosition[2]) >= this.getLeftHitBoxEdge(this.mapPosition[2])) {\n        horizontalIntersect = true;\n      }\n\n      return verticalIntersect && horizontalIntersect;\n    }\n  }, {\n    key: \"isAboveOnCanvas\",\n    value: function isAboveOnCanvas(cy) {\n      return this.canvasY + this.height < cy;\n    }\n  }, {\n    key: \"isBelowOnCanvas\",\n    value: function isBelowOnCanvas(cy) {\n      return this.canvasY > cy;\n    }\n  }]);\n\n  return Sprite;\n}();\n\nSprite.createObjects = function createObjects(spriteInfoArray, opts) {\n  if (!Array.isArray(spriteInfoArray)) spriteInfoArray = [spriteInfoArray];\n  opts = Object.merge(opts, {\n    rateModifier: 0,\n    dropRate: 1,\n    position: [0, 0]\n  }, false, false);\n\n  function createOne(spriteInfo) {\n    var position = opts.position;\n\n    if (Number.random(100 + opts.rateModifier) <= spriteInfo.dropRate) {\n      var sprite = new Sprite(spriteInfo.sprite);\n      sprite.setSpeed(0);\n\n      if (Object.isFunction(position)) {\n        position = position();\n      }\n\n      sprite.setMapPosition(position[0], position[1]);\n\n      if (spriteInfo.sprite.hitBehaviour && spriteInfo.sprite.hitBehaviour.skier && opts.player) {\n        sprite.onHitting(opts.player, spriteInfo.sprite.hitBehaviour.skier);\n      }\n\n      return sprite;\n    }\n  }\n\n  var objects = spriteInfoArray.map(createOne).remove(undefined);\n  return objects;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Sprite);\n\n//# sourceURL=webpack:///./js/lib/sprite.js?");

/***/ }),

/***/ "./js/lib/spriteArray.js":
/*!*******************************!*\
  !*** ./js/lib/spriteArray.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar SpriteArray = /*#__PURE__*/function (_Array) {\n  _inherits(SpriteArray, _Array);\n\n  var _super = _createSuper(SpriteArray);\n\n  function SpriteArray() {\n    var _this;\n\n    _classCallCheck(this, SpriteArray);\n\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(items));\n    _this.pushHandlers = [];\n    return _this;\n  }\n\n  _createClass(SpriteArray, [{\n    key: \"onPush\",\n    value: function onPush(f, retroactive) {\n      this.pushHandlers.push(f);\n\n      if (retroactive) {\n        this.each(f);\n      }\n    }\n  }, {\n    key: \"push\",\n    value: function push(obj) {\n      Array.prototype.push.call(this, obj);\n      this.pushHandlers.each(function (handler) {\n        handler(obj);\n      });\n    }\n  }, {\n    key: \"cull\",\n    value: function cull() {\n      this.each(function (obj, i) {\n        if (obj.deleted) {\n          return delete this[i];\n        }\n      });\n    }\n  }]);\n\n  return SpriteArray;\n}( /*#__PURE__*/_wrapNativeSuper(Array));\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SpriteArray); // (function (global) {\n// \tfunction SpriteArray() {\n// \t\tthis.pushHandlers = [];\n// \t\treturn this;\n// \t}\n// \tSpriteArray.prototype = Object.create(Array.prototype);\n// \tSpriteArray.prototype.onPush = function(f, retroactive) {\n// \t\tthis.pushHandlers.push(f);\n// \t\tif (retroactive) {\n// \t\t\tthis.each(f);\n// \t\t}\n// \t};\n// \tSpriteArray.prototype.push = function(obj) {\n// \t\tArray.prototype.push.call(this, obj);\n// \t\tthis.pushHandlers.each(function(handler) {\n// \t\t\thandler(obj);\n// \t\t});\n// \t};\n// \tSpriteArray.prototype.cull = function() {\n// \t\tthis.each(function (obj, i) {\n// \t\t\tif (obj.deleted) {\n// \t\t\t\treturn (delete this[i]);\n// \t\t\t}\n// \t\t});\n// \t};\n// \tglobal.spriteArray = SpriteArray;\n// })(this);\n// if (typeof module !== 'undefined') {\n// \tmodule.exports = this.spriteArray;\n// }\n\n//# sourceURL=webpack:///./js/lib/spriteArray.js?");

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_canvasRenderingContext2DExtensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/canvasRenderingContext2DExtensions */ \"./js/lib/canvasRenderingContext2DExtensions.js\");\n/* harmony import */ var _lib_canvasRenderingContext2DExtensions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_canvasRenderingContext2DExtensions__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_extenders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/extenders */ \"./js/lib/extenders.js\");\n/* harmony import */ var _lib_extenders__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lib_extenders__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_plugins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/plugins */ \"./js/lib/plugins.js\");\n/* harmony import */ var _lib_plugins__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lib_plugins__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hammerjs */ \"./node_modules/hammerjs/hammer.js\");\n/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(hammerjs__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var br_mousetrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! br-mousetrap */ \"./node_modules/br-mousetrap/mousetrap.js\");\n/* harmony import */ var br_mousetrap__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(br_mousetrap__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _lib_isMobileDevice__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/isMobileDevice */ \"./js/lib/isMobileDevice.js\");\n/* harmony import */ var _lib_isMobileDevice__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_lib_isMobileDevice__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _lib_monster__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/monster */ \"./js/lib/monster.js\");\n/* harmony import */ var _lib_sprite__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/sprite */ \"./js/lib/sprite.js\");\n/* harmony import */ var _lib_snowboarder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/snowboarder */ \"./js/lib/snowboarder.js\");\n/* harmony import */ var _lib_skier__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/skier */ \"./js/lib/skier.js\");\n/* harmony import */ var _lib_infoBox__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/infoBox */ \"./js/lib/infoBox.js\");\n/* harmony import */ var _lib_infoBox__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_lib_infoBox__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _lib_game__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lib/game */ \"./js/lib/game.js\");\n/* harmony import */ var _spriteInfo__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./spriteInfo */ \"./js/spriteInfo.js\");\n/* harmony import */ var _spriteInfo__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_spriteInfo__WEBPACK_IMPORTED_MODULE_12__);\n// Global dependencies which return no modules\n\n\n // External dependencies\n\n\n // Method modules\n\n // Game Objects\n\n\n\n\n\n\n // Local variables for starting the game\n\nvar mainCanvas = document.getElementById('skifree-canvas');\nvar dContext = mainCanvas.getContext('2d');\nvar imageSources = ['sprite-characters.png', 'skifree-objects.png'];\nvar infoBoxControls = 'Use the mouse or WASD to control the player';\nif (_lib_isMobileDevice__WEBPACK_IMPORTED_MODULE_5___default()()) infoBoxControls = 'Tap or drag on the piste to control the player';\n\nvar pixelsPerMetre = 18;\nvar distanceTravelledInMetres = 0;\nvar monsterDistanceThreshold = 2000;\nvar livesLeft = 5;\nvar highScore = 0;\nvar loseLifeOnObstacleHit = false;\nvar dropRates = {\n  smallTree: 4,\n  tallTree: 2,\n  jump: 1,\n  thickSnow: 1,\n  rock: 1\n};\nif (localStorage.getItem('highScore')) highScore = localStorage.getItem('highScore');\n\nfunction loadImages(sources, next) {\n  var loaded = 0;\n  var images = {};\n\n  function finish() {\n    loaded += 1;\n\n    if (loaded === sources.length) {\n      next(images);\n    }\n  }\n\n  sources.each(function (src) {\n    var im = new Image();\n    im.onload = finish;\n    im.src = src;\n    dContext.storeLoadedImage(src, im);\n  });\n}\n\nfunction monsterHitsSkierBehaviour(monster, skier) {\n  skier.isEatenBy(monster, function () {\n    livesLeft -= 1;\n    monster.isFull = true;\n    monster.isEating = false;\n    skier.isBeingEaten = false;\n    monster.setSpeed(skier.getSpeed());\n    monster.stopFollowing();\n    var randomPositionAbove = dContext.getRandomMapPositionAboveViewport();\n    monster.setMapPositionTarget(randomPositionAbove[0], randomPositionAbove[1]);\n  });\n}\n\nfunction startNeverEndingGame(images) {\n  var player;\n  var startSign;\n  var infoBox;\n  var game;\n\n  function resetGame() {\n    distanceTravelledInMetres = 0;\n    livesLeft = 5;\n    highScore = localStorage.getItem('highScore');\n    game.reset();\n    game.addStaticObject(startSign);\n  }\n\n  function detectEnd() {\n    if (!game.isPaused()) {\n      highScore = localStorage.setItem('highScore', distanceTravelledInMetres);\n      infoBox.setLines(['Game over!', 'Hit space to restart']);\n      game.pause();\n      game.cycle();\n    }\n  }\n\n  function randomlySpawnNPC(spawnFunction, dropRate) {\n    var rateModifier = Math.max(800 - mainCanvas.width, 0);\n\n    if (Number.random(1000 + rateModifier) <= dropRate) {\n      spawnFunction();\n    }\n  }\n\n  function spawnMonster() {\n    var newMonster = new _lib_monster__WEBPACK_IMPORTED_MODULE_6__[\"default\"](_spriteInfo__WEBPACK_IMPORTED_MODULE_12___default.a.monster);\n    var randomPosition = dContext.getRandomMapPositionAboveViewport();\n    newMonster.setMapPosition(randomPosition[0], randomPosition[1]);\n    newMonster.follow(player);\n    newMonster.setSpeed(player.getStandardSpeed());\n    newMonster.onHitting(player, monsterHitsSkierBehaviour);\n    game.addMovingObject(newMonster, 'monster');\n  }\n\n  function spawnBoarder() {\n    var newBoarder = new _lib_snowboarder__WEBPACK_IMPORTED_MODULE_8__[\"default\"](_spriteInfo__WEBPACK_IMPORTED_MODULE_12___default.a.snowboarder);\n    var randomPositionAbove = dContext.getRandomMapPositionAboveViewport();\n    var randomPositionBelow = dContext.getRandomMapPositionBelowViewport();\n    newBoarder.setMapPosition(randomPositionAbove[0], randomPositionAbove[1]);\n    newBoarder.setMapPositionTarget(randomPositionBelow[0], randomPositionBelow[1]);\n    newBoarder.onHitting(player, _spriteInfo__WEBPACK_IMPORTED_MODULE_12___default.a.snowboarder.hitBehaviour.skier);\n    game.addMovingObject(newBoarder);\n  }\n\n  player = new _lib_skier__WEBPACK_IMPORTED_MODULE_9__[\"default\"](_spriteInfo__WEBPACK_IMPORTED_MODULE_12___default.a.skier);\n  player.setMapPosition(0, 0);\n  player.setMapPositionTarget(0, -10);\n\n  if (loseLifeOnObstacleHit) {\n    player.setHitObstacleCb(function () {\n      livesLeft -= 1;\n    });\n  }\n\n  game = new _lib_game__WEBPACK_IMPORTED_MODULE_11__[\"default\"](mainCanvas, player);\n  startSign = new _lib_sprite__WEBPACK_IMPORTED_MODULE_7__[\"default\"](_spriteInfo__WEBPACK_IMPORTED_MODULE_12___default.a.signStart);\n  game.addStaticObject(startSign);\n  startSign.setMapPosition(-50, 0);\n  dContext.followSprite(player);\n  infoBox = new _lib_infoBox__WEBPACK_IMPORTED_MODULE_10___default.a({\n    initialLines: ['SkiFree.js', infoBoxControls, 'Travelled 0m', 'High Score: ' + highScore, 'Skiers left: ' + livesLeft, 'Created by Dan Hough (@basicallydan)'],\n    position: {\n      top: 15,\n      right: 10\n    }\n  });\n  game.beforeCycle(function () {\n    var newObjects = [];\n\n    if (player.isMoving) {\n      newObjects = _lib_sprite__WEBPACK_IMPORTED_MODULE_7__[\"default\"].createObjects([{\n        sprite: _spriteInfo__WEBPACK_IMPORTED_MODULE_12___default.a.smallTree,\n        dropRate: dropRates.smallTree\n      }, {\n        sprite: _spriteInfo__WEBPACK_IMPORTED_MODULE_12___default.a.tallTree,\n        dropRate: dropRates.tallTree\n      }, {\n        sprite: _spriteInfo__WEBPACK_IMPORTED_MODULE_12___default.a.jump,\n        dropRate: dropRates.jump\n      }, {\n        sprite: _spriteInfo__WEBPACK_IMPORTED_MODULE_12___default.a.thickSnow,\n        dropRate: dropRates.thickSnow\n      }, {\n        sprite: _spriteInfo__WEBPACK_IMPORTED_MODULE_12___default.a.rock,\n        dropRate: dropRates.rock\n      }], {\n        rateModifier: Math.max(800 - mainCanvas.width, 0),\n        position: function position() {\n          return dContext.getRandomMapPositionBelowViewport();\n        },\n        player: player\n      });\n    }\n\n    if (!game.isPaused()) {\n      game.addStaticObjects(newObjects);\n      randomlySpawnNPC(spawnBoarder, 0.1);\n      distanceTravelledInMetres = parseFloat(player.getPixelsTravelledDownMountain() / pixelsPerMetre).toFixed(1);\n\n      if (distanceTravelledInMetres > monsterDistanceThreshold) {\n        randomlySpawnNPC(spawnMonster, 0.001);\n      }\n\n      infoBox.setLines(['SkiFree.js', infoBoxControls, 'Travelled ' + distanceTravelledInMetres + 'm', 'Skiers left: ' + livesLeft, 'High Score: ' + highScore, 'Created by Dan Hough (@basicallydan)', 'Current Speed: ' + player.getSpeed()\n      /*,\r\n      'Skier Map Position: ' + player.mapPosition[0].toFixed(1) + ', ' + player.mapPosition[1].toFixed(1),\r\n      'Mouse Map Position: ' + mouseMapPosition[0].toFixed(1) + ', ' + mouseMapPosition[1].toFixed(1)*/\n      ]);\n    }\n  });\n  game.afterCycle(function () {\n    if (livesLeft === 0) {\n      detectEnd();\n    }\n  });\n  game.addUIElement(infoBox);\n  $(mainCanvas).mousemove(function (e) {\n    game.setMouseX(e.pageX);\n    game.setMouseY(e.pageY);\n    player.resetDirection();\n    player.startMovingIfPossible();\n  }).bind('click', function (e) {\n    game.setMouseX(e.pageX);\n    game.setMouseY(e.pageY);\n    player.resetDirection();\n    player.startMovingIfPossible();\n  }).focus(); // So we can listen to events immediately\n\n  br_mousetrap__WEBPACK_IMPORTED_MODULE_4___default.a.bind('f', function () {\n    player.speedBoost();\n  });\n  br_mousetrap__WEBPACK_IMPORTED_MODULE_4___default.a.bind('t', function () {\n    player.attemptTrick();\n  });\n  br_mousetrap__WEBPACK_IMPORTED_MODULE_4___default.a.bind(['w', 'up'], function () {\n    player.stop();\n  });\n  br_mousetrap__WEBPACK_IMPORTED_MODULE_4___default.a.bind(['a', 'left'], function () {\n    if (player.direction === 270) {\n      player.stepWest();\n    } else {\n      player.turnWest();\n    }\n  });\n  br_mousetrap__WEBPACK_IMPORTED_MODULE_4___default.a.bind(['s', 'down'], function () {\n    player.setDirection(180);\n    player.startMovingIfPossible();\n  });\n  br_mousetrap__WEBPACK_IMPORTED_MODULE_4___default.a.bind(['d', 'right'], function () {\n    if (player.direction === 90) {\n      player.stepEast();\n    } else {\n      player.turnEast();\n    }\n  });\n  br_mousetrap__WEBPACK_IMPORTED_MODULE_4___default.a.bind('m', spawnMonster);\n  br_mousetrap__WEBPACK_IMPORTED_MODULE_4___default.a.bind('b', spawnBoarder);\n  br_mousetrap__WEBPACK_IMPORTED_MODULE_4___default.a.bind('space', resetGame);\n  var hammertime = new hammerjs__WEBPACK_IMPORTED_MODULE_3___default.a(mainCanvas);\n  hammertime.on('press', function (e) {\n    e.preventDefault();\n    game.setMouseX(e.gesture.center.x);\n    game.setMouseY(e.gesture.center.y);\n  });\n  hammertime.on('tap', function (e) {\n    game.setMouseX(e.gesture.center.x);\n    game.setMouseY(e.gesture.center.y);\n  });\n  hammertime.on('pan', function (e) {\n    game.setMouseX(e.gesture.center.x);\n    game.setMouseY(e.gesture.center.y);\n    player.resetDirection();\n    player.startMovingIfPossible();\n  });\n  hammertime.on('doubletap', function (e) {\n    player.speedBoost();\n  });\n  player.isMoving = false;\n  player.setDirection(270);\n  game.start();\n}\n\nfunction resizeCanvas() {\n  mainCanvas.width = window.innerWidth;\n  mainCanvas.height = window.innerHeight;\n}\n\nwindow.addEventListener('resize', resizeCanvas, false);\nresizeCanvas();\nloadImages(imageSources, startNeverEndingGame);\n\n//# sourceURL=webpack:///./js/main.js?");

/***/ }),

/***/ "./js/spriteInfo.js":
/*!**************************!*\
  !*** ./js/spriteInfo.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global) {\n  var sprites = {\n    'skier': {\n      $imageFile: 'sprite-characters.png',\n      parts: {\n        blank: [0, 0, 0, 0],\n        east: [0, 0, 24, 34],\n        esEast: [24, 0, 24, 34],\n        sEast: [49, 0, 17, 34],\n        south: [65, 0, 17, 34],\n        sWest: [49, 37, 17, 34],\n        wsWest: [24, 37, 24, 34],\n        west: [0, 37, 24, 34],\n        hit: [0, 78, 31, 31],\n        jumping: [84, 0, 32, 34],\n        somersault1: [116, 0, 32, 34],\n        somersault2: [148, 0, 32, 34]\n      },\n      hitBoxes: {\n        0: [7, 20, 27, 34]\n      },\n      id: 'player',\n      hitBehaviour: {}\n    },\n    'smallTree': {\n      $imageFile: 'skifree-objects.png',\n      parts: {\n        main: [0, 28, 30, 34]\n      },\n      hitBoxes: {\n        0: [0, 18, 30, 34]\n      },\n      hitBehaviour: {}\n    },\n    'tallTree': {\n      $imageFile: 'skifree-objects.png',\n      parts: {\n        main: [95, 66, 32, 64]\n      },\n      zIndexesOccupied: [0, 1],\n      hitBoxes: {\n        0: [0, 54, 32, 64],\n        1: [0, 10, 32, 54]\n      },\n      hitBehaviour: {}\n    },\n    'thickSnow': {\n      $imageFile: 'skifree-objects.png',\n      parts: {\n        main: [143, 53, 43, 10]\n      },\n      hitBehaviour: {}\n    },\n    'rock': {\n      $imageFile: 'skifree-objects.png',\n      parts: {\n        main: [30, 52, 23, 11]\n      },\n      hitBehaviour: {}\n    },\n    'monster': {\n      $imageFile: 'sprite-characters.png',\n      parts: {\n        sEast1: [64, 112, 26, 43],\n        sEast2: [90, 112, 32, 43],\n        sWest1: [64, 158, 26, 43],\n        sWest2: [90, 158, 32, 43],\n        eating1: [122, 112, 34, 43],\n        eating2: [156, 112, 31, 43],\n        eating3: [187, 112, 31, 43],\n        eating4: [219, 112, 25, 43],\n        eating5: [243, 112, 26, 43]\n      },\n      hitBehaviour: {}\n    },\n    'jump': {\n      $imageFile: 'skifree-objects.png',\n      parts: {\n        main: [109, 55, 32, 8]\n      },\n      hitBehaviour: {}\n    },\n    'signStart': {\n      $imageFile: 'skifree-objects.png',\n      parts: {\n        main: [260, 103, 42, 27]\n      },\n      hitBehaviour: {}\n    },\n    'snowboarder': {\n      $imageFile: 'sprite-characters.png',\n      parts: {\n        sEast: [73, 229, 20, 29],\n        sWest: [95, 228, 26, 30]\n      },\n      hitBehaviour: {}\n    },\n    'emptyChairLift': {\n      $imageFile: 'skifree-objects.png',\n      parts: {\n        main: [92, 136, 26, 30]\n      },\n      zIndexesOccupied: [1]\n    }\n  };\n\n  function monsterHitsTreeBehaviour(monster) {\n    monster.deleteOnNextCycle();\n  }\n\n  sprites.monster.hitBehaviour.tree = monsterHitsTreeBehaviour;\n\n  function treeHitsMonsterBehaviour(tree, monster) {\n    monster.deleteOnNextCycle();\n  }\n\n  sprites.smallTree.hitBehaviour.monster = treeHitsMonsterBehaviour;\n  sprites.tallTree.hitBehaviour.monster = treeHitsMonsterBehaviour;\n\n  function skierHitsTreeBehaviour(skier, tree) {\n    skier.hasHitObstacle(tree);\n  }\n\n  function treeHitsSkierBehaviour(tree, skier) {\n    skier.hasHitObstacle(tree);\n  }\n\n  sprites.smallTree.hitBehaviour.skier = treeHitsSkierBehaviour;\n  sprites.tallTree.hitBehaviour.skier = treeHitsSkierBehaviour;\n\n  function rockHitsSkierBehaviour(rock, skier) {\n    skier.hasHitObstacle(rock);\n  }\n\n  sprites.rock.hitBehaviour.skier = rockHitsSkierBehaviour;\n\n  function skierHitsJumpBehaviour(skier, jump) {\n    skier.hasHitJump(jump);\n  }\n\n  function jumpHitsSkierBehaviour(jump, skier) {\n    skier.hasHitJump(jump);\n  }\n\n  sprites.jump.hitBehaviour.skier = jumpHitsSkierBehaviour; // Really not a fan of this behaviour.\n\n  /*\tfunction skierHitsThickSnowBehaviour(skier, thickSnow) {\r\n  \t\t// Need to implement this properly\r\n  \t\tskier.setSpeed(2);\r\n  \t\tsetTimeout(function() {\r\n  \t\t\tskier.resetSpeed();\r\n  \t\t}, 700);\r\n  \t}\r\n  \r\n  \tfunction thickSnowHitsSkierBehaviour(thickSnow, skier) {\r\n  \t\t// Need to implement this properly\r\n  \t\tskier.setSpeed(2);\r\n  \t\tsetTimeout(function() {\r\n  \t\t\tskier.resetSpeed();\r\n  \t\t}, 300);\r\n  \t}*/\n  // sprites.thickSnow.hitBehaviour.skier = thickSnowHitsSkierBehaviour;\n\n  function snowboarderHitsSkierBehaviour(snowboarder, skier) {\n    skier.hasHitObstacle(snowboarder);\n  }\n\n  sprites.snowboarder.hitBehaviour.skier = snowboarderHitsSkierBehaviour;\n  global.spriteInfo = sprites;\n})(this);\n\nif (true) {\n  module.exports = this.spriteInfo;\n}\n\n//# sourceURL=webpack:///./js/spriteInfo.js?");

/***/ }),

/***/ "./node_modules/br-mousetrap/mousetrap.js":
/*!************************************************!*\
  !*** ./node_modules/br-mousetrap/mousetrap.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Copyright 2012 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.1.3\n * @url craig.is/killing/mice\n */\n(function() {\n\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */\n    var _MAP = {\n            8: 'backspace',\n            9: 'tab',\n            13: 'enter',\n            16: 'shift',\n            17: 'ctrl',\n            18: 'alt',\n            20: 'capslock',\n            27: 'esc',\n            32: 'space',\n            33: 'pageup',\n            34: 'pagedown',\n            35: 'end',\n            36: 'home',\n            37: 'left',\n            38: 'up',\n            39: 'right',\n            40: 'down',\n            45: 'ins',\n            46: 'del',\n            91: 'meta',\n            93: 'meta',\n            224: 'meta'\n        },\n\n        /**\n         * mapping for special characters so they can support\n         *\n         * this dictionary is only used incase you want to bind a\n         * keyup or keydown event to one of these keys\n         *\n         * @type {Object}\n         */\n        _KEYCODE_MAP = {\n            106: '*',\n            107: '+',\n            109: '-',\n            110: '.',\n            111 : '/',\n            186: ';',\n            187: '=',\n            188: ',',\n            189: '-',\n            190: '.',\n            191: '/',\n            192: '`',\n            219: '[',\n            220: '\\\\',\n            221: ']',\n            222: '\\''\n        },\n\n        /**\n         * this is a mapping of keys that require shift on a US keypad\n         * back to the non shift equivelents\n         *\n         * this is so you can use keyup events with these keys\n         *\n         * note that this will only work reliably on US keyboards\n         *\n         * @type {Object}\n         */\n        _SHIFT_MAP = {\n            '~': '`',\n            '!': '1',\n            '@': '2',\n            '#': '3',\n            '$': '4',\n            '%': '5',\n            '^': '6',\n            '&': '7',\n            '*': '8',\n            '(': '9',\n            ')': '0',\n            '_': '-',\n            '+': '=',\n            ':': ';',\n            '\\\"': '\\'',\n            '<': ',',\n            '>': '.',\n            '?': '/',\n            '|': '\\\\'\n        },\n\n        /**\n         * this is a list of special strings you can use to map\n         * to modifier keys when you specify your keyboard shortcuts\n         *\n         * @type {Object}\n         */\n        _SPECIAL_ALIASES = {\n            'option': 'alt',\n            'command': 'meta',\n            'return': 'enter',\n            'escape': 'esc'\n        },\n\n        /**\n         * variable to store the flipped version of _MAP from above\n         * needed to check if we should use keypress or not when no action\n         * is specified\n         *\n         * @type {Object|undefined}\n         */\n        _REVERSE_MAP,\n\n        /**\n         * a list of all the callbacks setup via Mousetrap.bind()\n         *\n         * @type {Object}\n         */\n        _callbacks = {},\n\n        /**\n         * direct map of string combinations to callbacks used for trigger()\n         *\n         * @type {Object}\n         */\n        _direct_map = {},\n\n        /**\n         * keeps track of what level each sequence is at since multiple\n         * sequences can start out with the same sequence\n         *\n         * @type {Object}\n         */\n        _sequence_levels = {},\n\n        /**\n         * variable to store the setTimeout call\n         *\n         * @type {null|number}\n         */\n        _reset_timer,\n\n        /**\n         * temporary state where we will ignore the next keyup\n         *\n         * @type {boolean|string}\n         */\n        _ignore_next_keyup = false,\n\n        /**\n         * are we currently inside of a sequence?\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n         *\n         * @type {boolean|string}\n         */\n        _inside_sequence = false;\n\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */\n    for (var i = 1; i < 20; ++i) {\n        _MAP[111 + i] = 'f' + i;\n    }\n\n    /**\n     * loop through to map numbers on the numeric keypad\n     */\n    for (i = 0; i <= 9; ++i) {\n        _MAP[i + 96] = i;\n    }\n\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */\n    function _addEvent(object, type, callback) {\n        if (object.addEventListener) {\n            object.addEventListener(type, callback, false);\n            return;\n        }\n\n        object.attachEvent('on' + type, callback);\n    }\n\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */\n    function _characterFromEvent(e) {\n\n        // for keypress events we should return the character as is\n        if (e.type == 'keypress') {\n            return String.fromCharCode(e.which);\n        }\n\n        // for non keypress events the special maps are needed\n        if (_MAP[e.which]) {\n            return _MAP[e.which];\n        }\n\n        if (_KEYCODE_MAP[e.which]) {\n            return _KEYCODE_MAP[e.which];\n        }\n\n        // if it is not in the special map\n        return String.fromCharCode(e.which).toLowerCase();\n    }\n\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */\n    function _modifiersMatch(modifiers1, modifiers2) {\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n    }\n\n    /**\n     * resets all sequence counters except for the ones passed in\n     *\n     * @param {Object} do_not_reset\n     * @returns void\n     */\n    function _resetSequences(do_not_reset) {\n        do_not_reset = do_not_reset || {};\n\n        var active_sequences = false,\n            key;\n\n        for (key in _sequence_levels) {\n            if (do_not_reset[key]) {\n                active_sequences = true;\n                continue;\n            }\n            _sequence_levels[key] = 0;\n        }\n\n        if (!active_sequences) {\n            _inside_sequence = false;\n        }\n    }\n\n    /**\n     * finds all callbacks that match based on the keycode, modifiers,\n     * and action\n     *\n     * @param {string} character\n     * @param {Array} modifiers\n     * @param {Event|Object} e\n     * @param {boolean=} remove - should we remove any matches\n     * @param {string=} combination\n     * @returns {Array}\n     */\n    function _getMatches(character, modifiers, e, remove, combination) {\n        var i,\n            callback,\n            matches = [],\n            action = e.type;\n\n        // if there are no events related to this keycode\n        if (!_callbacks[character]) {\n            return [];\n        }\n\n        // if a modifier key is coming up on its own we should allow it\n        if (action == 'keyup' && _isModifier(character)) {\n            modifiers = [character];\n        }\n\n        // loop through all callbacks for the key that was pressed\n        // and see if any of them match\n        for (i = 0; i < _callbacks[character].length; ++i) {\n            callback = _callbacks[character][i];\n\n            // if this is a sequence but it is not at the right level\n            // then move onto the next match\n            if (callback.seq && _sequence_levels[callback.seq] != callback.level) {\n                continue;\n            }\n\n            // if the action we are looking for doesn't match the action we got\n            // then we should keep going\n            if (action != callback.action) {\n                continue;\n            }\n\n            // if this is a keypress event and the meta key and control key\n            // are not pressed that means that we need to only look at the\n            // character, otherwise check the modifiers as well\n            //\n            // chrome will not fire a keypress if meta or control is down\n            // safari will fire a keypress if meta or meta+shift is down\n            // firefox will fire a keypress if meta or control is down\n            if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\n\n                // remove is used so if you change your mind and call bind a\n                // second time with a new function the first one is overwritten\n                if (remove && callback.combo == combination) {\n                    _callbacks[character].splice(i, 1);\n                }\n\n                matches.push(callback);\n            }\n        }\n\n        return matches;\n    }\n\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */\n    function _eventModifiers(e) {\n        var modifiers = [];\n\n        if (e.shiftKey) {\n            modifiers.push('shift');\n        }\n\n        if (e.altKey) {\n            modifiers.push('alt');\n        }\n\n        if (e.ctrlKey) {\n            modifiers.push('ctrl');\n        }\n\n        if (e.metaKey) {\n            modifiers.push('meta');\n        }\n\n        return modifiers;\n    }\n\n    /**\n     * actually calls the callback function\n     *\n     * if your callback function returns false this will use the jquery\n     * convention - prevent default and stop propogation on the event\n     *\n     * @param {Function} callback\n     * @param {Event} e\n     * @returns void\n     */\n    function _fireCallback(callback, e) {\n        if (callback(e) === false) {\n            if (e.preventDefault) {\n                e.preventDefault();\n            }\n\n            if (e.stopPropagation) {\n                e.stopPropagation();\n            }\n\n            e.returnValue = false;\n            e.cancelBubble = true;\n        }\n    }\n\n    /**\n     * handles a character key event\n     *\n     * @param {string} character\n     * @param {Event} e\n     * @returns void\n     */\n    function _handleCharacter(character, e) {\n\n        // if this event should not happen stop here\n        if (Mousetrap.stopCallback(e, e.target || e.srcElement)) {\n            return;\n        }\n\n        var callbacks = _getMatches(character, _eventModifiers(e), e),\n            i,\n            do_not_reset = {},\n            processed_sequence_callback = false;\n\n        // loop through matching callbacks for this key event\n        for (i = 0; i < callbacks.length; ++i) {\n\n            // fire for all sequence callbacks\n            // this is because if for example you have multiple sequences\n            // bound such as \"g i\" and \"g t\" they both need to fire the\n            // callback for matching g cause otherwise you can only ever\n            // match the first one\n            if (callbacks[i].seq) {\n                processed_sequence_callback = true;\n\n                // keep a list of which sequences were matches for later\n                do_not_reset[callbacks[i].seq] = 1;\n                _fireCallback(callbacks[i].callback, e);\n                continue;\n            }\n\n            // if there were no sequence matches but we are still here\n            // that means this is a regular match so we should fire that\n            if (!processed_sequence_callback && !_inside_sequence) {\n                _fireCallback(callbacks[i].callback, e);\n            }\n        }\n\n        // if you are inside of a sequence and the key you are pressing\n        // is not a modifier key then we should reset all sequences\n        // that were not matched by this key event\n        if (e.type == _inside_sequence && !_isModifier(character)) {\n            _resetSequences(do_not_reset);\n        }\n    }\n\n    /**\n     * handles a keydown event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _handleKey(e) {\n\n        // normalize e.which for key events\n        // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n        e.which = typeof e.which == \"number\" ? e.which : e.keyCode;\n\n        var character = _characterFromEvent(e);\n\n        // no character found then stop\n        if (!character) {\n            return;\n        }\n\n        if (e.type == 'keyup' && _ignore_next_keyup == character) {\n            _ignore_next_keyup = false;\n            return;\n        }\n\n        _handleCharacter(character, e);\n    }\n\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n    function _isModifier(key) {\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n    }\n\n    /**\n     * called to set a 1 second timeout on the specified sequence\n     *\n     * this is so after each key press in the sequence you have 1 second\n     * to press the next key before you have to start over\n     *\n     * @returns void\n     */\n    function _resetSequenceTimer() {\n        clearTimeout(_reset_timer);\n        _reset_timer = setTimeout(_resetSequences, 1000);\n    }\n\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */\n    function _getReverseMap() {\n        if (!_REVERSE_MAP) {\n            _REVERSE_MAP = {};\n            for (var key in _MAP) {\n\n                // pull out the numeric keypad from here cause keypress should\n                // be able to detect the keys from the character\n                if (key > 95 && key < 112) {\n                    continue;\n                }\n\n                if (_MAP.hasOwnProperty(key)) {\n                    _REVERSE_MAP[_MAP[key]] = key;\n                }\n            }\n        }\n        return _REVERSE_MAP;\n    }\n\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */\n    function _pickBestAction(key, modifiers, action) {\n\n        // if no action was picked in we should try to pick the one\n        // that we think would work best for this key\n        if (!action) {\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n        }\n\n        // modifier keys don't work as expected with keypress,\n        // switch to keydown\n        if (action == 'keypress' && modifiers.length) {\n            action = 'keydown';\n        }\n\n        return action;\n    }\n\n    /**\n     * binds a key sequence to an event\n     *\n     * @param {string} combo - combo specified in bind call\n     * @param {Array} keys\n     * @param {Function} callback\n     * @param {string=} action\n     * @returns void\n     */\n    function _bindSequence(combo, keys, callback, action) {\n\n        // start off by adding a sequence level record for this combination\n        // and setting the level to 0\n        _sequence_levels[combo] = 0;\n\n        // if there is no action pick the best one for the first key\n        // in the sequence\n        if (!action) {\n            action = _pickBestAction(keys[0], []);\n        }\n\n        /**\n         * callback to increase the sequence level for this sequence and reset\n         * all other sequences that were active\n         *\n         * @param {Event} e\n         * @returns void\n         */\n        var _increaseSequence = function(e) {\n                _inside_sequence = action;\n                ++_sequence_levels[combo];\n                _resetSequenceTimer();\n            },\n\n            /**\n             * wraps the specified callback inside of another function in order\n             * to reset all sequence counters as soon as this sequence is done\n             *\n             * @param {Event} e\n             * @returns void\n             */\n            _callbackAndReset = function(e) {\n                _fireCallback(callback, e);\n\n                // we should ignore the next key up if the action is key down\n                // or keypress.  this is so if you finish a sequence and\n                // release the key the final key will not trigger a keyup\n                if (action !== 'keyup') {\n                    _ignore_next_keyup = _characterFromEvent(e);\n                }\n\n                // weird race condition if a sequence ends with the key\n                // another sequence begins with\n                setTimeout(_resetSequences, 10);\n            },\n            i;\n\n        // loop through keys one at a time and bind the appropriate callback\n        // function.  for any key leading up to the final one it should\n        // increase the sequence. after the final, it should reset all sequences\n        for (i = 0; i < keys.length; ++i) {\n            _bindSingle(keys[i], i < keys.length - 1 ? _increaseSequence : _callbackAndReset, action, combo, i);\n        }\n    }\n\n    /**\n     * binds a single keyboard combination\n     *\n     * @param {string} combination\n     * @param {Function} callback\n     * @param {string=} action\n     * @param {string=} sequence_name - name of sequence if part of sequence\n     * @param {number=} level - what part of the sequence the command is\n     * @returns void\n     */\n    function _bindSingle(combination, callback, action, sequence_name, level) {\n\n        // make sure multiple spaces in a row become a single space\n        combination = combination.replace(/\\s+/g, ' ');\n\n        var sequence = combination.split(' '),\n            i,\n            key,\n            keys,\n            modifiers = [];\n\n        // if this pattern is a sequence of keys then run through this method\n        // to reprocess each pattern one key at a time\n        if (sequence.length > 1) {\n            _bindSequence(combination, sequence, callback, action);\n            return;\n        }\n\n        // take the keys from this pattern and figure out what the actual\n        // pattern is all about\n        keys = combination === '+' ? ['+'] : combination.split('+');\n\n        for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n\n            // normalize key names\n            if (_SPECIAL_ALIASES[key]) {\n                key = _SPECIAL_ALIASES[key];\n            }\n\n            // if this is not a keypress event then we should\n            // be smart about using shift keys\n            // this will only work for US keyboards however\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n                key = _SHIFT_MAP[key];\n                modifiers.push('shift');\n            }\n\n            // if this key is a modifier then add it to the list of modifiers\n            if (_isModifier(key)) {\n                modifiers.push(key);\n            }\n        }\n\n        // depending on what the key combination is\n        // we will try to pick the best event for it\n        action = _pickBestAction(key, modifiers, action);\n\n        // make sure to initialize array if this is the first time\n        // a callback is added for this key\n        if (!_callbacks[key]) {\n            _callbacks[key] = [];\n        }\n\n        // remove an existing match if there is one\n        _getMatches(key, modifiers, {type: action}, !sequence_name, combination);\n\n        // add this call back to the array\n        // if it is a sequence put it at the beginning\n        // if not put it at the end\n        //\n        // this is important because the way these are processed expects\n        // the sequence ones to come first\n        _callbacks[key][sequence_name ? 'unshift' : 'push']({\n            callback: callback,\n            modifiers: modifiers,\n            action: action,\n            seq: sequence_name,\n            level: level,\n            combo: combination\n        });\n    }\n\n    /**\n     * binds multiple combinations to the same callback\n     *\n     * @param {Array} combinations\n     * @param {Function} callback\n     * @param {string|undefined} action\n     * @returns void\n     */\n    function _bindMultiple(combinations, callback, action) {\n        for (var i = 0; i < combinations.length; ++i) {\n            _bindSingle(combinations[i], callback, action);\n        }\n    }\n\n    // start!\n    _addEvent(document, 'keypress', _handleKey);\n    _addEvent(document, 'keydown', _handleKey);\n    _addEvent(document, 'keyup', _handleKey);\n\n    var Mousetrap = {\n\n        /**\n         * binds an event to mousetrap\n         *\n         * can be a single key, a combination of keys separated with +,\n         * an array of keys, or a sequence of keys separated by spaces\n         *\n         * be sure to list the modifier keys first to make sure that the\n         * correct key ends up getting bound (the last key in the pattern)\n         *\n         * @param {string|Array} keys\n         * @param {Function} callback\n         * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n         * @returns void\n         */\n        bind: function(keys, callback, action) {\n            _bindMultiple(keys instanceof Array ? keys : [keys], callback, action);\n            _direct_map[keys + ':' + action] = callback;\n            return this;\n        },\n\n        /**\n         * unbinds an event to mousetrap\n         *\n         * the unbinding sets the callback function of the specified key combo\n         * to an empty function and deletes the corresponding key in the\n         * _direct_map dict.\n         *\n         * the keycombo+action has to be exactly the same as\n         * it was defined in the bind method\n         *\n         * TODO: actually remove this from the _callbacks dictionary instead\n         * of binding an empty function\n         *\n         * @param {string|Array} keys\n         * @param {string} action\n         * @returns void\n         */\n        unbind: function(keys, action) {\n            if (_direct_map[keys + ':' + action]) {\n                delete _direct_map[keys + ':' + action];\n                this.bind(keys, function() {}, action);\n            }\n            return this;\n        },\n\n        /**\n         * triggers an event that has already been bound\n         *\n         * @param {string} keys\n         * @param {string=} action\n         * @returns void\n         */\n        trigger: function(keys, action) {\n            _direct_map[keys + ':' + action]();\n            return this;\n        },\n\n        /**\n         * resets the library back to its initial state.  this is useful\n         * if you want to clear out the current keyboard shortcuts and bind\n         * new ones - for example if you switch to another page\n         *\n         * @returns void\n         */\n        reset: function() {\n            _callbacks = {};\n            _direct_map = {};\n            return this;\n        },\n\n       /**\n        * should we stop this event before firing off callbacks\n        *\n        * @param {Event} e\n        * @param {Element} element\n        * @return {boolean}\n        */\n        stopCallback: function(e, element) {\n\n            // if the element has the class \"mousetrap\" then no need to stop\n            if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n                return false;\n            }\n\n            // stop for input, select, and textarea\n            return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || (element.contentEditable && element.contentEditable == 'true');\n        }\n    };\n\n    // expose mousetrap to the global object\n    window.Mousetrap = Mousetrap;\n\n    // expose mousetrap as an AMD module\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return Mousetrap; }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n    // browserify support\n    if( true && module.exports) {\n        module.exports = Mousetrap;\n    }\n}) ();\n\n\n//# sourceURL=webpack:///./node_modules/br-mousetrap/mousetrap.js?");

/***/ }),

/***/ "./node_modules/eventedloop/lib/main.js":
/*!**********************************************!*\
  !*** ./node_modules/eventedloop/lib/main.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function() {\n    var root = this;\n    var EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\tvar _ = __webpack_require__(/*! underscore */ \"./node_modules/eventedloop/node_modules/underscore/underscore.js\");\n\tvar intervalParser = /([0-9\\.]+)(ms|s|m|h)?/;\n\tvar root = global || window;\n\n\t// Lil bit of useful polyfill...\n\tif (typeof(Function.prototype.inherits) === 'undefined') {\n\t\tFunction.prototype.inherits = function(parent) {\n\t\t\tthis.prototype = Object.create(parent.prototype);\n\t\t};\n\t}\n\n\tif (typeof(Array.prototype.removeOne) === 'undefined') {\n\t\tArray.prototype.removeOne = function() {\n\t\t\tvar what, a = arguments, L = a.length, ax;\n\t\t\twhile (L && this.length) {\n\t\t\t\twhat = a[--L];\n\t\t\t\twhile ((ax = this.indexOf(what)) !== -1) {\n\t\t\t\t\treturn this.splice(ax, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction greatestCommonFactor(intervals) {\n\t\tvar sumOfModuli = 1;\n\t\tvar interval = _.min(intervals);\n\t\twhile (sumOfModuli !== 0) {\n\t\t\tsumOfModuli = _.reduce(intervals, function(memo, i){ return memo + (i % interval); }, 0);\n\t\t\tif (sumOfModuli !== 0) {\n\t\t\t\tinterval -= 10;\n\t\t\t}\n\t\t}\n\t\treturn interval;\n\t}\n\n\tfunction parseEvent(e) {\n\t\tvar intervalGroups = intervalParser.exec(e);\n\t\tif (!intervalGroups) {\n\t\t\tthrow new Error('I don\\'t understand that particular interval');\n\t\t}\n\t\tvar intervalAmount = +intervalGroups[1];\n\t\tvar intervalType = intervalGroups[2] || 'ms';\n\t\tif (intervalType === 's') {\n\t\t\tintervalAmount = intervalAmount * 1000;\n\t\t} else if (intervalType === 'm') {\n\t\t\tintervalAmount = intervalAmount * 1000 * 60;\n\t\t} else if (intervalType === 'h') {\n\t\t\tintervalAmount = intervalAmount * 1000 * 60 * 60;\n\t\t} else if (!!intervalType && intervalType !== 'ms') {\n\t\t\tthrow new Error('You can only specify intervals of ms, s, m, or h');\n\t\t}\n\t\tif (intervalAmount < 10 || intervalAmount % 10 !== 0) {\n\t\t\t// We only deal in 10's of milliseconds for simplicity\n\t\t\tthrow new Error('You can only specify 10s of milliseconds, trust me on this one');\n\t\t}\n\t\treturn {\n\t\t\tamount:intervalAmount,\n\t\t\ttype:intervalType\n\t\t};\n\t}\n\n\tfunction EventedLoop() {\n\t\tthis.intervalId = undefined;\n\t\tthis.intervalLength = undefined;\n\t\tthis.intervalsToEmit = {};\n\t\tthis.currentTick = 1;\n\t\tthis.maxTicks = 0;\n\t\tthis.listeningForFocus = false;\n\n\t\t// Private method\n\t\tvar determineIntervalLength = function () {\n\t\t\tvar potentialIntervalLength = greatestCommonFactor(_.keys(this.intervalsToEmit));\n\t\t\tvar changed = false;\n\n\t\t\tif (this.intervalLength) {\n\t\t\t\tif (potentialIntervalLength !== this.intervalLength) {\n\t\t\t\t\t// Looks like we need a new interval\n\t\t\t\t\tthis.intervalLength = potentialIntervalLength;\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.intervalLength = potentialIntervalLength;\n\t\t\t}\n\n\t\t\tthis.maxTicks = _.max(_.map(_.keys(this.intervalsToEmit), function(a) { return +a; })) / this.intervalLength;\n\t\t\treturn changed;\n\t\t}.bind(this);\n\n\t\tthis.on('newListener', function (e) {\n\t\t\tif (e === 'removeListener' || e === 'newListener') return; // We don't care about that one\n\t\t\tvar intervalInfo = parseEvent(e);\n\t\t\tvar intervalAmount = intervalInfo.amount;\n\n\t\t\tthis.intervalsToEmit[+intervalAmount] = _.union(this.intervalsToEmit[+intervalAmount] || [], [e]);\n\t\t\t\n\t\t\tif (determineIntervalLength() && this.isStarted()) {\n\t\t\t\tthis.stop().start();\n\t\t\t}\n\t\t});\n\n\t\tthis.on('removeListener', function (e) {\n\t\t\tif (EventEmitter.listenerCount(this, e) > 0) return;\n\t\t\tvar intervalInfo = parseEvent(e);\n\t\t\tvar intervalAmount = intervalInfo.amount;\n\n\t\t\tvar removedEvent = this.intervalsToEmit[+intervalAmount].removeOne(e);\n\t\t\tif (this.intervalsToEmit[+intervalAmount].length === 0) {\n\t\t\t\tdelete this.intervalsToEmit[+intervalAmount];\n\t\t\t}\n\t\t\tconsole.log('Determining interval length after removal of', removedEvent);\n\t\t\tdetermineIntervalLength();\n\n\t\t\tif (determineIntervalLength() && this.isStarted()) {\n\t\t\t\tthis.stop().start();\n\t\t\t}\n\t\t});\n\t}\n\n\tEventedLoop.inherits(EventEmitter);\n\n\t// Public methods\n\tEventedLoop.prototype.tick = function () {\n\t\tvar milliseconds = this.currentTick * this.intervalLength;\n\t\t_.each(this.intervalsToEmit, function (events, key) {\n\t\t\tif (milliseconds % key === 0) {\n\t\t\t\t_.each(events, function(e) { this.emit(e, e, key); }.bind(this));\n\t\t\t}\n\t\t}.bind(this));\n\t\tthis.currentTick += 1;\n\t\tif (this.currentTick > this.maxTicks) {\n\t\t\tthis.currentTick = 1;\n\t\t}\n\t\treturn this;\n\t};\n\n\tEventedLoop.prototype.start = function () {\n\t\tif (!this.intervalLength) {\n\t\t\tthrow new Error('You haven\\'t specified any interval callbacks. Use EventedLoop.on(\\'500ms\\', function () { ... }) to do so, and then you can start');\n\t\t}\n\t\tif (this.intervalId) {\n\t\t\treturn console.log('No need to start the loop again, it\\'s already started.');\n\t\t}\n\n\t\tthis.intervalId = setInterval(this.tick.bind(this), this.intervalLength);\n\n\t\tif (root && !this.listeningForFocus && root.addEventListener) {\n\t\t\troot.addEventListener('focus', function() {\n\t\t\t\tthis.start();\n\t\t\t}.bind(this));\n\n\t\t\troot.addEventListener('blur', function() {\n\t\t\t\tthis.stop();\n\t\t\t}.bind(this));\n\n\t\t\tthis.listeningForFocus = true;\n\t\t}\n\t\treturn this;\n\t};\n\n\tEventedLoop.prototype.stop = function () {\n\t\tclearInterval(this.intervalId);\n\t\tthis.intervalId = undefined;\n\t\treturn this;\n\t};\n\n\tEventedLoop.prototype.isStarted = function () {\n\t\treturn !!this.intervalId;\n\t};\n\n\tEventedLoop.prototype.every = EventedLoop.prototype.on;\n\n    // Export the EventedLoop object for **Node.js** or other\n    // commonjs systems. Otherwise, add it as a global object to the root\n    if (true) {\n        if ( true && module.exports) {\n            exports = module.exports = EventedLoop;\n        }\n        exports.EventedLoop = EventedLoop;\n    }\n    if (typeof window !== 'undefined') {\n        window.EventedLoop = EventedLoop;\n    }\n}).call(this);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/eventedloop/lib/main.js?");

/***/ }),

/***/ "./node_modules/eventedloop/node_modules/underscore/underscore.js":
/*!************************************************************************!*\
  !*** ./node_modules/eventedloop/node_modules/underscore/underscore.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.6.0\n//     http://underscorejs.org\n//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    concat           = ArrayProto.concat,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object via a string identifier,\n  // for Closure Compiler \"advanced\" mode.\n  if (true) {\n    if ( true && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {}\n\n  // Current version.\n  _.VERSION = '1.6.0';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return obj;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, length = obj.length; i < length; i++) {\n        if (iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (var i = 0, length = keys.length; i < length; i++) {\n        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = _.collect = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results.push(iterator.call(context, value, index, list));\n    });\n    return results;\n  };\n\n  var reduceError = 'Reduce of empty array with no initial value';\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var length = obj.length;\n    if (length !== +length) {\n      var keys = _.keys(obj);\n      length = keys.length;\n    }\n    each(obj, function(value, index, list) {\n      index = keys ? keys[--length] : --length;\n      if (!initial) {\n        memo = obj[index];\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, obj[index], index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (predicate.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);\n    each(obj, function(value, index, list) {\n      if (predicate.call(context, value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, function(value, index, list) {\n      return !predicate.call(context, value, index, list);\n    }, context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate || (predicate = _.identity);\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && predicate.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, predicate, context) {\n    predicate || (predicate = _.identity);\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);\n    each(obj, function(value, index, list) {\n      if (result || (result = predicate.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if the array or object contains a given value (using `===`).\n  // Aliased as `include`.\n  _.contains = _.include = function(obj, target) {\n    if (obj == null) return false;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    return any(obj, function(value) {\n      return value === target;\n    });\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matches(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matches(attrs));\n  };\n\n  // Return the maximum element or (element-based computation).\n  // Can't optimize arrays of integers longer than 65,535 elements.\n  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.max.apply(Math, obj);\n    }\n    var result = -Infinity, lastComputed = -Infinity;\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      if (computed > lastComputed) {\n        result = value;\n        lastComputed = computed;\n      }\n    });\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.min.apply(Math, obj);\n    }\n    var result = Infinity, lastComputed = Infinity;\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      if (computed < lastComputed) {\n        result = value;\n        lastComputed = computed;\n      }\n    });\n    return result;\n  };\n\n  // Shuffle an array, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var rand;\n    var index = 0;\n    var shuffled = [];\n    each(obj, function(value) {\n      rand = _.random(index++);\n      shuffled[index - 1] = shuffled[rand];\n      shuffled[rand] = value;\n    });\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (obj.length !== +obj.length) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // An internal function to generate lookup iterators.\n  var lookupIterator = function(value) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return value;\n    return _.property(value);\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, iterator, context) {\n    iterator = lookupIterator(iterator);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iterator, context) {\n      var result = {};\n      iterator = lookupIterator(iterator);\n      each(obj, function(value, index) {\n        var key = iterator.call(context, value, index, obj);\n        behavior(result, key, value);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, key, value) {\n    _.has(result, key) ? result[key].push(value) : result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, key, value) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, key) {\n    _.has(result, key) ? result[key]++ : result[key] = 1;\n  });\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator, context) {\n    iterator = lookupIterator(iterator);\n    var value = iterator.call(context, obj);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >>> 1;\n      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if ((n == null) || guard) return array[0];\n    if (n < 0) return [];\n    return slice.call(array, 0, n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if ((n == null) || guard) return array[array.length - 1];\n    return slice.call(array, Math.max(array.length - n, 0));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, (n == null) || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, output) {\n    if (shallow && _.every(input, _.isArray)) {\n      return concat.apply(output, input);\n    }\n    each(input, function(value) {\n      if (_.isArray(value) || _.isArguments(value)) {\n        shallow ? push.apply(output, value) : flatten(value, shallow, output);\n      } else {\n        output.push(value);\n      }\n    });\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Split an array into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(array, predicate) {\n    var pass = [], fail = [];\n    each(array, function(elem) {\n      (predicate(elem) ? pass : fail).push(elem);\n    });\n    return [pass, fail];\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iterator, context) {\n    if (_.isFunction(isSorted)) {\n      context = iterator;\n      iterator = isSorted;\n      isSorted = false;\n    }\n    var initial = iterator ? _.map(array, iterator, context) : array;\n    var results = [];\n    var seen = [];\n    each(initial, function(value, index) {\n      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {\n        seen.push(value);\n        results.push(array[index]);\n      }\n    });\n    return results;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(_.flatten(arguments, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.contains(other, item);\n      });\n    });\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));\n    return _.filter(array, function(value){ return !_.contains(rest, value); });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var length = _.max(_.pluck(arguments, 'length').concat(0));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) {\n      results[i] = _.pluck(arguments, '' + i);\n    }\n    return results;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    if (list == null) return {};\n    var result = {};\n    for (var i = 0, length = list.length; i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i = 0, length = array.length;\n    if (isSorted) {\n      if (typeof isSorted == 'number') {\n        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);\n      } else {\n        i = _.sortedIndex(array, item);\n        return array[i] === item ? i : -1;\n      }\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);\n    for (; i < length; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item, from) {\n    if (array == null) return -1;\n    var hasIndex = from != null;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {\n      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);\n    }\n    var i = (hasIndex ? from : array.length);\n    while (i--) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(length);\n\n    while(idx < length) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Reusable constructor function for prototype setting.\n  var ctor = function(){};\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    var args, bound;\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError;\n    args = slice.call(arguments, 2);\n    return bound = function() {\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n      ctor.prototype = func.prototype;\n      var self = new ctor;\n      ctor.prototype = null;\n      var result = func.apply(self, args.concat(slice.call(arguments)));\n      if (Object(result) === result) return result;\n      return self;\n    };\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    return function() {\n      var position = 0;\n      var args = boundArgs.slice();\n      for (var i = 0, length = args.length; i < length; i++) {\n        if (args[i] === _) args[i] = arguments[position++];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return func.apply(this, args);\n    };\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length === 0) throw new Error('bindAll must be passed function names');\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    options || (options = {});\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0) {\n        clearTimeout(timeout);\n        timeout = null;\n        previous = now;\n        result = func.apply(context, args);\n        context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n      if (last < wait) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      memo = func.apply(this, arguments);\n      func = null;\n      return memo;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments;\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = new Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = new Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    each(keys, function(key) {\n      if (key in obj) copy[key] = obj[key];\n    });\n    return copy;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    for (var key in obj) {\n      if (!_.contains(keys, key)) copy[key] = obj[key];\n    }\n    return copy;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          if (obj[prop] === void 0) obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className != toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] == a) return bStack[length] == b;\n    }\n    // Objects with different constructors are not equivalent, but `Object`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&\n                             _.isFunction(bCtor) && (bCtor instanceof bCtor))\n                        && ('constructor' in a && 'constructor' in b)) {\n      return false;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    var size = 0, result = true;\n    // Recursively compare objects and arrays.\n    if (className == '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size == b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          if (!(result = eq(a[size], b[size], aStack, bStack))) break;\n        }\n      }\n    } else {\n      // Deep compare objects.\n      for (var key in a) {\n        if (_.has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (_.has(b, key) && !(size--)) break;\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return result;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, [], []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    return obj === Object(obj);\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) == '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return !!(obj && _.has(obj, 'callee'));\n    };\n  }\n\n  // Optimize `isFunction` if appropriate.\n  if (true) {\n    _.isFunction = function(obj) {\n      return typeof obj === 'function';\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj != +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  _.constant = function(value) {\n    return function () {\n      return value;\n    };\n  };\n\n  _.property = function(key) {\n    return function(obj) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.\n  _.matches = function(attrs) {\n    return function(obj) {\n      if (obj === attrs) return true; //avoid comparing an object to itself.\n      for (var key in attrs) {\n        if (attrs[key] !== obj[key])\n          return false;\n      }\n      return true;\n    }\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iterator, context) {\n    var accum = Array(Math.max(0, n));\n    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() { return new Date().getTime(); };\n\n  // List of HTML entities for escaping.\n  var entityMap = {\n    escape: {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;'\n    }\n  };\n  entityMap.unescape = _.invert(entityMap.escape);\n\n  // Regexes containing the keys and values listed immediately above.\n  var entityRegexes = {\n    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),\n    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')\n  };\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  _.each(['escape', 'unescape'], function(method) {\n    _[method] = function(string) {\n      if (string == null) return '';\n      return ('' + string).replace(entityRegexes[method], function(match) {\n        return entityMap[method][match];\n      });\n    };\n  });\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return void 0;\n    var value = object[property];\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result.call(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\t':     't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(text, data, settings) {\n    var render;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = new RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset)\n        .replace(escaper, function(match) { return '\\\\' + escapes[match]; });\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      }\n      if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      }\n      if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n      index = offset + match.length;\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + \"return __p;\\n\";\n\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    if (data) return render(data, _);\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled function source as a convenience for precompilation.\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function, which will delegate to the wrapper.\n  _.chain = function(obj) {\n    return _(obj).chain();\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj) {\n    return this._chain ? _(obj).chain() : obj;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];\n      return result.call(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result.call(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  _.extend(_.prototype, {\n\n    // Start chaining a wrapped Underscore object.\n    chain: function() {\n      this._chain = true;\n      return this;\n    },\n\n    // Extracts the result from a wrapped and chained object.\n    value: function() {\n      return this._wrapped;\n    }\n\n  });\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n}).call(this);\n\n\n//# sourceURL=webpack:///./node_modules/eventedloop/node_modules/underscore/underscore.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/events/events.js?");

/***/ }),

/***/ "./node_modules/hammerjs/hammer.js":
/*!*****************************************!*\
  !*** ./node_modules/hammerjs/hammer.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.8 - 2016-09-30\r\n * http://hammerjs.github.io/\r\n *\r\n * Copyright (c)  Jorik Tangelder;\r\n * Licensed under the MIT license */\r\n(function(window, document, exportName, undefined) { \r\n'use strict';\r\n/**\r\n * @private\r\n * use the val2 when val1 is undefined\r\n * @param {*} val1\r\n * @param {*} val2\r\n * @returns {*}\r\n */\r\nfunction ifUndefined(val1, val2) {\r\n  return val1 === undefined ? val2 : val1;\r\n}\r\n\r\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\r\nvar TEST_ELEMENT = document.createElement('div');\r\n\r\nvar TYPE_FUNCTION = 'function';\r\n\r\nvar round = Math.round;\r\nvar abs = Math.abs;\r\nvar now = Date.now;\r\n\r\n/**\r\n * @private\r\n * get the prefixed property\r\n * @param {Object} obj\r\n * @param {String} property\r\n * @returns {String|Undefined} prefixed\r\n */\r\nfunction prefixed(obj, property) {\r\n  var prefix = void 0;\r\n  var prop = void 0;\r\n  var camelProp = property[0].toUpperCase() + property.slice(1);\r\n\r\n  var i = 0;\r\n  while (i < VENDOR_PREFIXES.length) {\r\n    prefix = VENDOR_PREFIXES[i];\r\n    prop = prefix ? prefix + camelProp : property;\r\n\r\n    if (prop in obj) {\r\n      return prop;\r\n    }\r\n    i++;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction getTouchActionProps() {\r\n  if (!NATIVE_TOUCH_ACTION) {\r\n    return false;\r\n  }\r\n  var touchMap = {};\r\n  var cssSupports = window.CSS && window.CSS.supports;\r\n  ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {\r\n\r\n    // If css.supports is not supported but there is native touch-action assume it supports\r\n    // all values. This is the case for IE 10 and 11.\r\n    return touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\r\n  });\r\n  return touchMap;\r\n}\r\n\r\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\r\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\r\n\r\n// magical touchAction value\r\nvar TOUCH_ACTION_COMPUTE = 'compute';\r\nvar TOUCH_ACTION_AUTO = 'auto';\r\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\r\nvar TOUCH_ACTION_NONE = 'none';\r\nvar TOUCH_ACTION_PAN_X = 'pan-x';\r\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\r\nvar TOUCH_ACTION_MAP = getTouchActionProps();\r\n\r\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\r\n\r\nvar SUPPORT_TOUCH = 'ontouchstart' in window;\r\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\r\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\r\n\r\nvar INPUT_TYPE_TOUCH = 'touch';\r\nvar INPUT_TYPE_PEN = 'pen';\r\nvar INPUT_TYPE_MOUSE = 'mouse';\r\nvar INPUT_TYPE_KINECT = 'kinect';\r\n\r\nvar COMPUTE_INTERVAL = 25;\r\n\r\nvar INPUT_START = 1;\r\nvar INPUT_MOVE = 2;\r\nvar INPUT_END = 4;\r\nvar INPUT_CANCEL = 8;\r\n\r\nvar DIRECTION_NONE = 1;\r\nvar DIRECTION_LEFT = 2;\r\nvar DIRECTION_RIGHT = 4;\r\nvar DIRECTION_UP = 8;\r\nvar DIRECTION_DOWN = 16;\r\n\r\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\r\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\r\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\r\n\r\nvar PROPS_XY = ['x', 'y'];\r\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\r\n\r\nvar STATE_POSSIBLE = 1;\r\nvar STATE_BEGAN = 2;\r\nvar STATE_CHANGED = 4;\r\nvar STATE_ENDED = 8;\r\nvar STATE_RECOGNIZED = STATE_ENDED;\r\nvar STATE_CANCELLED = 16;\r\nvar STATE_FAILED = 32;\r\n\r\n/**\r\n * @private\r\n * extend object.\r\n * means that properties in dest will be overwritten by the ones in src.\r\n * @param {Object} target\r\n * @param {...Object} objects_to_assign\r\n * @returns {Object} target\r\n */\r\nvar assign = void 0;\r\nif (typeof Object.assign !== 'function') {\r\n  assign = function assign(target) {\r\n    if (target === undefined || target === null) {\r\n      throw new TypeError('Cannot convert undefined or null to object');\r\n    }\r\n\r\n    var output = Object(target);\r\n    for (var index = 1; index < arguments.length; index++) {\r\n      var source = arguments[index];\r\n      if (source !== undefined && source !== null) {\r\n        for (var nextKey in source) {\r\n          if (source.hasOwnProperty(nextKey)) {\r\n            output[nextKey] = source[nextKey];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return output;\r\n  };\r\n} else {\r\n  assign = Object.assign;\r\n}\r\n\r\nvar assign$1 = assign;\r\n\r\n/**\r\n * @private\r\n * get a unique id\r\n * @returns {number} uniqueId\r\n */\r\nvar _uniqueId = 1;\r\nfunction uniqueId() {\r\n  return _uniqueId++;\r\n}\r\n\r\n/**\r\n * @private\r\n * walk objects and arrays\r\n * @param {Object} obj\r\n * @param {Function} iterator\r\n * @param {Object} context\r\n */\r\nfunction each(obj, iterator, context) {\r\n  var i = void 0;\r\n\r\n  if (!obj) {\r\n    return;\r\n  }\r\n\r\n  if (obj.forEach) {\r\n    obj.forEach(iterator, context);\r\n  } else if (obj.length !== undefined) {\r\n    i = 0;\r\n    while (i < obj.length) {\r\n      iterator.call(context, obj[i], i, obj);\r\n      i++;\r\n    }\r\n  } else {\r\n    for (i in obj) {\r\n      obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * if the argument is an array, we want to execute the fn on each entry\r\n * if it aint an array we don't want to do a thing.\r\n * this is used by all the methods that accept a single and array argument.\r\n * @param {*|Array} arg\r\n * @param {String} fn\r\n * @param {Object} [context]\r\n * @returns {Boolean}\r\n */\r\nfunction invokeArrayArg(arg, fn, context) {\r\n  if (Array.isArray(arg)) {\r\n    each(arg, context[fn], context);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @private\r\n * find if a array contains the object using indexOf or a simple polyFill\r\n * @param {Array} src\r\n * @param {String} find\r\n * @param {String} [findByKey]\r\n * @return {number} -1 when not found, or the index\r\n */\r\nfunction inArray(src, find, findByKey) {\r\n  if (src.indexOf && !findByKey) {\r\n    return src.indexOf(find);\r\n  } else {\r\n    var i = 0;\r\n    while (i < src.length) {\r\n      if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {\r\n        // do not use === here, test fails\r\n        return i;\r\n      }\r\n      i++;\r\n    }\r\n    return -1;\r\n  }\r\n}\r\n\r\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\r\n  return typeof obj;\r\n} : function (obj) {\r\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n};\r\n\r\nvar asyncGenerator = function () {\r\n  function AwaitValue(value) {\r\n    this.value = value;\r\n  }\r\n\r\n  function AsyncGenerator(gen) {\r\n    var front, back;\r\n\r\n    function send(key, arg) {\r\n      return new Promise(function (resolve, reject) {\r\n        var request = {\r\n          key: key,\r\n          arg: arg,\r\n          resolve: resolve,\r\n          reject: reject,\r\n          next: null\r\n        };\r\n\r\n        if (back) {\r\n          back = back.next = request;\r\n        } else {\r\n          front = back = request;\r\n          resume(key, arg);\r\n        }\r\n      });\r\n    }\r\n\r\n    function resume(key, arg) {\r\n      try {\r\n        var result = gen[key](arg);\r\n        var value = result.value;\r\n\r\n        if (value instanceof AwaitValue) {\r\n          Promise.resolve(value.value).then(function (arg) {\r\n            resume(\"next\", arg);\r\n          }, function (arg) {\r\n            resume(\"throw\", arg);\r\n          });\r\n        } else {\r\n          settle(result.done ? \"return\" : \"normal\", result.value);\r\n        }\r\n      } catch (err) {\r\n        settle(\"throw\", err);\r\n      }\r\n    }\r\n\r\n    function settle(type, value) {\r\n      switch (type) {\r\n        case \"return\":\r\n          front.resolve({\r\n            value: value,\r\n            done: true\r\n          });\r\n          break;\r\n\r\n        case \"throw\":\r\n          front.reject(value);\r\n          break;\r\n\r\n        default:\r\n          front.resolve({\r\n            value: value,\r\n            done: false\r\n          });\r\n          break;\r\n      }\r\n\r\n      front = front.next;\r\n\r\n      if (front) {\r\n        resume(front.key, front.arg);\r\n      } else {\r\n        back = null;\r\n      }\r\n    }\r\n\r\n    this._invoke = send;\r\n\r\n    if (typeof gen.return !== \"function\") {\r\n      this.return = undefined;\r\n    }\r\n  }\r\n\r\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\r\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\r\n      return this;\r\n    };\r\n  }\r\n\r\n  AsyncGenerator.prototype.next = function (arg) {\r\n    return this._invoke(\"next\", arg);\r\n  };\r\n\r\n  AsyncGenerator.prototype.throw = function (arg) {\r\n    return this._invoke(\"throw\", arg);\r\n  };\r\n\r\n  AsyncGenerator.prototype.return = function (arg) {\r\n    return this._invoke(\"return\", arg);\r\n  };\r\n\r\n  return {\r\n    wrap: function (fn) {\r\n      return function () {\r\n        return new AsyncGenerator(fn.apply(this, arguments));\r\n      };\r\n    },\r\n    await: function (value) {\r\n      return new AwaitValue(value);\r\n    }\r\n  };\r\n}();\r\n\r\nvar classCallCheck = function (instance, Constructor) {\r\n  if (!(instance instanceof Constructor)) {\r\n    throw new TypeError(\"Cannot call a class as a function\");\r\n  }\r\n};\r\n\r\nvar createClass = function () {\r\n  function defineProperties(target, props) {\r\n    for (var i = 0; i < props.length; i++) {\r\n      var descriptor = props[i];\r\n      descriptor.enumerable = descriptor.enumerable || false;\r\n      descriptor.configurable = true;\r\n      if (\"value\" in descriptor) descriptor.writable = true;\r\n      Object.defineProperty(target, descriptor.key, descriptor);\r\n    }\r\n  }\r\n\r\n  return function (Constructor, protoProps, staticProps) {\r\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\r\n    if (staticProps) defineProperties(Constructor, staticProps);\r\n    return Constructor;\r\n  };\r\n}();\r\n\r\nvar get = function get(object, property, receiver) {\r\n  if (object === null) object = Function.prototype;\r\n  var desc = Object.getOwnPropertyDescriptor(object, property);\r\n\r\n  if (desc === undefined) {\r\n    var parent = Object.getPrototypeOf(object);\r\n\r\n    if (parent === null) {\r\n      return undefined;\r\n    } else {\r\n      return get(parent, property, receiver);\r\n    }\r\n  } else if (\"value\" in desc) {\r\n    return desc.value;\r\n  } else {\r\n    var getter = desc.get;\r\n\r\n    if (getter === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    return getter.call(receiver);\r\n  }\r\n};\r\n\r\nvar inherits = function (subClass, superClass) {\r\n  if (typeof superClass !== \"function\" && superClass !== null) {\r\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\r\n  }\r\n\r\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\r\n    constructor: {\r\n      value: subClass,\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: true\r\n    }\r\n  });\r\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\r\n};\r\n\r\nvar possibleConstructorReturn = function (self, call) {\r\n  if (!self) {\r\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\r\n  }\r\n\r\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\r\n};\r\n\r\nvar slicedToArray = function () {\r\n  function sliceIterator(arr, i) {\r\n    var _arr = [];\r\n    var _n = true;\r\n    var _d = false;\r\n    var _e = undefined;\r\n\r\n    try {\r\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\r\n        _arr.push(_s.value);\r\n\r\n        if (i && _arr.length === i) break;\r\n      }\r\n    } catch (err) {\r\n      _d = true;\r\n      _e = err;\r\n    } finally {\r\n      try {\r\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\r\n      } finally {\r\n        if (_d) throw _e;\r\n      }\r\n    }\r\n\r\n    return _arr;\r\n  }\r\n\r\n  return function (arr, i) {\r\n    if (Array.isArray(arr)) {\r\n      return arr;\r\n    } else if (Symbol.iterator in Object(arr)) {\r\n      return sliceIterator(arr, i);\r\n    } else {\r\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * @private\r\n * let a boolean value also be a function that must return a boolean\r\n * this first item in args will be used as the context\r\n * @param {Boolean|Function} val\r\n * @param {Array} [args]\r\n * @returns {Boolean}\r\n */\r\nfunction boolOrFn(val, args) {\r\n  if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === TYPE_FUNCTION) {\r\n    return val.apply(args ? args[0] || undefined : undefined, args);\r\n  }\r\n  return val;\r\n}\r\n\r\n/**\r\n * @private\r\n * get a recognizer by name if it is bound to a manager\r\n * @param {Recognizer|String} otherRecognizer\r\n * @param {Recognizer} recognizer\r\n * @returns {Recognizer}\r\n */\r\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\r\n  var manager = recognizer.manager;\r\n\r\n  if (manager) {\r\n    return manager.get(otherRecognizer);\r\n  }\r\n  return otherRecognizer;\r\n}\r\n\r\n/**\r\n * @private\r\n * get a usable string, used as event postfix\r\n * @param {constant} state\r\n * @returns {String} state\r\n */\r\nfunction stateStr(state) {\r\n  if (state & STATE_CANCELLED) {\r\n    return 'cancel';\r\n  } else if (state & STATE_ENDED) {\r\n    return 'end';\r\n  } else if (state & STATE_CHANGED) {\r\n    return 'move';\r\n  } else if (state & STATE_BEGAN) {\r\n    return 'start';\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * @private\r\n * Recognizer flow explained; *\r\n * All recognizers have the initial state of POSSIBLE when a input session starts.\r\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\r\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\r\n *\r\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\r\n * which determines with state it should be.\r\n *\r\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\r\n * POSSIBLE to give it another change on the next cycle.\r\n *\r\n *               Possible\r\n *                  |\r\n *            +-----+---------------+\r\n *            |                     |\r\n *      +-----+-----+               |\r\n *      |           |               |\r\n *   Failed      Cancelled          |\r\n *                          +-------+------+\r\n *                          |              |\r\n *                      Recognized       Began\r\n *                                         |\r\n *                                      Changed\r\n *                                         |\r\n *                                  Ended/Recognized\r\n */\r\n\r\n/**\r\n * @private\r\n * Recognizer\r\n * Every recognizer needs to extend from this class.\r\n * @constructor\r\n * @param {Object} options\r\n */\r\n\r\nvar Recognizer = function () {\r\n  function Recognizer(options) {\r\n    classCallCheck(this, Recognizer);\r\n\r\n    this.options = assign$1({}, this.defaults, options || {});\r\n\r\n    this.id = uniqueId();\r\n\r\n    this.manager = null;\r\n\r\n    // default is enable true\r\n    this.options.enable = ifUndefined(this.options.enable, true);\r\n\r\n    this.state = STATE_POSSIBLE;\r\n    this.simultaneous = {};\r\n    this.requireFail = [];\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * set options\r\n   * @param {Object} options\r\n   * @return {Recognizer}\r\n   */\r\n\r\n\r\n  createClass(Recognizer, [{\r\n    key: 'set',\r\n    value: function set(options) {\r\n      assign$1(this.options, options);\r\n\r\n      // also update the touchAction, in case something changed about the directions/enabled state\r\n      this.manager && this.manager.touchAction.update();\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * recognize simultaneous with an other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n\r\n  }, {\r\n    key: 'recognizeWith',\r\n    value: function recognizeWith(otherRecognizer) {\r\n      if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\r\n        return this;\r\n      }\r\n\r\n      var simultaneous = this.simultaneous;\r\n\r\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n      if (!simultaneous[otherRecognizer.id]) {\r\n        simultaneous[otherRecognizer.id] = otherRecognizer;\r\n        otherRecognizer.recognizeWith(this);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n\r\n  }, {\r\n    key: 'dropRecognizeWith',\r\n    value: function dropRecognizeWith(otherRecognizer) {\r\n      if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\r\n        return this;\r\n      }\r\n\r\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n      delete this.simultaneous[otherRecognizer.id];\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * recognizer can only run when an other is failing\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n\r\n  }, {\r\n    key: 'requireFailure',\r\n    value: function requireFailure(otherRecognizer) {\r\n      if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\r\n        return this;\r\n      }\r\n\r\n      var requireFail = this.requireFail;\r\n\r\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n      if (inArray(requireFail, otherRecognizer) === -1) {\r\n        requireFail.push(otherRecognizer);\r\n        otherRecognizer.requireFailure(this);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n\r\n  }, {\r\n    key: 'dropRequireFailure',\r\n    value: function dropRequireFailure(otherRecognizer) {\r\n      if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\r\n        return this;\r\n      }\r\n\r\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n      var index = inArray(this.requireFail, otherRecognizer);\r\n      if (index > -1) {\r\n        this.requireFail.splice(index, 1);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * has require failures boolean\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: 'hasRequireFailures',\r\n    value: function hasRequireFailures() {\r\n      return this.requireFail.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * if the recognizer can recognize simultaneous with an other recognizer\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Boolean}\r\n     */\r\n\r\n  }, {\r\n    key: 'canRecognizeWith',\r\n    value: function canRecognizeWith(otherRecognizer) {\r\n      return !!this.simultaneous[otherRecognizer.id];\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * You should use `tryEmit` instead of `emit` directly to check\r\n     * that all the needed recognizers has failed before emitting.\r\n     * @param {Object} input\r\n     */\r\n\r\n  }, {\r\n    key: 'emit',\r\n    value: function emit(input) {\r\n      var self = this;\r\n      var state = this.state;\r\n\r\n\r\n      function emit(event) {\r\n        self.manager.emit(event, input);\r\n      }\r\n\r\n      // 'panstart' and 'panmove'\r\n      if (state < STATE_ENDED) {\r\n        emit(self.options.event + stateStr(state));\r\n      }\r\n\r\n      emit(self.options.event); // simple 'eventName' events\r\n\r\n      if (input.additionalEvent) {\r\n        // additional event(panleft, panright, pinchin, pinchout...)\r\n        emit(input.additionalEvent);\r\n      }\r\n\r\n      // panend and pancancel\r\n      if (state >= STATE_ENDED) {\r\n        emit(self.options.event + stateStr(state));\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Check that all the require failure recognizers has failed,\r\n     * if true, it emits a gesture event,\r\n     * otherwise, setup the state to FAILED.\r\n     * @param {Object} input\r\n     */\r\n\r\n  }, {\r\n    key: 'tryEmit',\r\n    value: function tryEmit(input) {\r\n      if (this.canEmit()) {\r\n        return this.emit(input);\r\n      }\r\n      // it's failing anyway\r\n      this.state = STATE_FAILED;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * can we emit?\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: 'canEmit',\r\n    value: function canEmit() {\r\n      var i = 0;\r\n      while (i < this.requireFail.length) {\r\n        if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\r\n          return false;\r\n        }\r\n        i++;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * update the recognizer\r\n     * @param {Object} inputData\r\n     */\r\n\r\n  }, {\r\n    key: 'recognize',\r\n    value: function recognize(inputData) {\r\n      // make a new copy of the inputData\r\n      // so we can change the inputData without messing up the other recognizers\r\n      var inputDataClone = assign$1({}, inputData);\r\n\r\n      // is is enabled and allow recognizing?\r\n      if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\r\n        this.reset();\r\n        this.state = STATE_FAILED;\r\n        return;\r\n      }\r\n\r\n      // reset when we've reached the end\r\n      if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\r\n        this.state = STATE_POSSIBLE;\r\n      }\r\n\r\n      this.state = this.process(inputDataClone);\r\n\r\n      // the recognizer has recognized a gesture\r\n      // so trigger an event\r\n      if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\r\n        this.tryEmit(inputDataClone);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * return the state of the recognizer\r\n     * the actual recognizing happens in this method\r\n     * @virtual\r\n     * @param {Object} inputData\r\n     * @returns {constant} STATE\r\n     */\r\n\r\n    /* jshint ignore:start */\r\n\r\n  }, {\r\n    key: 'process',\r\n    value: function process(inputData) {}\r\n    /* jshint ignore:end */\r\n\r\n    /**\r\n     * @private\r\n     * return the preferred touch-action\r\n     * @virtual\r\n     * @returns {Array}\r\n     */\r\n\r\n  }, {\r\n    key: 'getTouchAction',\r\n    value: function getTouchAction() {}\r\n\r\n    /**\r\n     * @private\r\n     * called when the gesture isn't allowed to recognize\r\n     * like when another is being recognized or it is disabled\r\n     * @virtual\r\n     */\r\n\r\n  }, {\r\n    key: 'reset',\r\n    value: function reset() {}\r\n  }]);\r\n  return Recognizer;\r\n}();\r\n\r\nRecognizer.prototype.defaults = {};\r\n\r\n/**\r\n * @private\r\n * This recognizer is just used as a base for the simple attribute recognizers.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\n\r\nvar AttrRecognizer = function (_Recognizer) {\r\n  inherits(AttrRecognizer, _Recognizer);\r\n\r\n  function AttrRecognizer() {\r\n    classCallCheck(this, AttrRecognizer);\r\n    return possibleConstructorReturn(this, (AttrRecognizer.__proto__ || Object.getPrototypeOf(AttrRecognizer)).apply(this, arguments));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * Used to check if it the recognizer receives valid input, like input.distance > 10.\r\n   * @memberof AttrRecognizer\r\n   * @param {Object} input\r\n   * @returns {Boolean} recognized\r\n   */\r\n\r\n\r\n  createClass(AttrRecognizer, [{\r\n    key: 'attrTest',\r\n    value: function attrTest(input) {\r\n      var optionPointers = this.options.pointers;\r\n      return optionPointers === 0 || input.pointers.length === optionPointers;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Process the input and return the state for the recognizer\r\n     * @memberof AttrRecognizer\r\n     * @param {Object} input\r\n     * @returns {*} State\r\n     */\r\n\r\n  }, {\r\n    key: 'process',\r\n    value: function process(input) {\r\n      var state = this.state;\r\n      var eventType = input.eventType;\r\n\r\n\r\n      var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\r\n      var isValid = this.attrTest(input);\r\n\r\n      // on cancel input and we've recognized before, return STATE_CANCELLED\r\n      if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\r\n        return state | STATE_CANCELLED;\r\n      } else if (isRecognized || isValid) {\r\n        if (eventType & INPUT_END) {\r\n          return state | STATE_ENDED;\r\n        } else if (!(state & STATE_BEGAN)) {\r\n          return STATE_BEGAN;\r\n        }\r\n        return state | STATE_CHANGED;\r\n      }\r\n      return STATE_FAILED;\r\n    }\r\n  }]);\r\n  return AttrRecognizer;\r\n}(Recognizer);\r\n\r\nAttrRecognizer.prototype.defaults = {\r\n  /**\r\n   * @private\r\n   * @type {Number}\r\n   * @default 1\r\n   */\r\n  pointers: 1\r\n};\r\n\r\n/**\r\n * @private\r\n * Rotate\r\n * Recognized when two or more pointer are moving in a circular motion.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\n\r\nvar RotateRecognizer = function (_AttrRecognizer) {\r\n  inherits(RotateRecognizer, _AttrRecognizer);\r\n\r\n  function RotateRecognizer() {\r\n    classCallCheck(this, RotateRecognizer);\r\n    return possibleConstructorReturn(this, (RotateRecognizer.__proto__ || Object.getPrototypeOf(RotateRecognizer)).apply(this, arguments));\r\n  }\r\n\r\n  createClass(RotateRecognizer, [{\r\n    key: 'getTouchAction',\r\n    value: function getTouchAction() {\r\n      return [TOUCH_ACTION_NONE];\r\n    }\r\n  }, {\r\n    key: 'attrTest',\r\n    value: function attrTest(input) {\r\n      return get(RotateRecognizer.prototype.__proto__ || Object.getPrototypeOf(RotateRecognizer.prototype), 'attrTest', this).call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\r\n    }\r\n  }]);\r\n  return RotateRecognizer;\r\n}(AttrRecognizer);\r\n\r\nRotateRecognizer.prototype.defaults = {\r\n  event: 'rotate',\r\n  threshold: 0,\r\n  pointers: 2\r\n};\r\n\r\n/**\r\n * @private\r\n * Pinch\r\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\n\r\nvar PinchRecognizer = function (_AttrRecognizer) {\r\n  inherits(PinchRecognizer, _AttrRecognizer);\r\n\r\n  function PinchRecognizer() {\r\n    classCallCheck(this, PinchRecognizer);\r\n    return possibleConstructorReturn(this, (PinchRecognizer.__proto__ || Object.getPrototypeOf(PinchRecognizer)).apply(this, arguments));\r\n  }\r\n\r\n  createClass(PinchRecognizer, [{\r\n    key: 'getTouchAction',\r\n    value: function getTouchAction() {\r\n      return [TOUCH_ACTION_NONE];\r\n    }\r\n  }, {\r\n    key: 'attrTest',\r\n    value: function attrTest(input) {\r\n      return get(PinchRecognizer.prototype.__proto__ || Object.getPrototypeOf(PinchRecognizer.prototype), 'attrTest', this).call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\r\n    }\r\n  }, {\r\n    key: 'emit',\r\n    value: function emit(input) {\r\n      if (input.scale !== 1) {\r\n        var inOut = input.scale < 1 ? 'in' : 'out';\r\n        input.additionalEvent = this.options.event + inOut;\r\n      }\r\n      get(PinchRecognizer.prototype.__proto__ || Object.getPrototypeOf(PinchRecognizer.prototype), 'emit', this).call(this, input);\r\n    }\r\n  }]);\r\n  return PinchRecognizer;\r\n}(AttrRecognizer);\r\n\r\nPinchRecognizer.prototype.defaults = {\r\n  event: 'pinch',\r\n  threshold: 0,\r\n  pointers: 2\r\n};\r\n\r\n/**\r\n * @private\r\n * direction cons to string\r\n * @param {constant} direction\r\n * @returns {String}\r\n */\r\nfunction directionStr(direction) {\r\n  if (direction === DIRECTION_DOWN) {\r\n    return 'down';\r\n  } else if (direction === DIRECTION_UP) {\r\n    return 'up';\r\n  } else if (direction === DIRECTION_LEFT) {\r\n    return 'left';\r\n  } else if (direction === DIRECTION_RIGHT) {\r\n    return 'right';\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * @private\r\n * Pan\r\n * Recognized when the pointer is down and moved in the allowed direction.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\n\r\nvar PanRecognizer = function (_AttrRecognizer) {\r\n  inherits(PanRecognizer, _AttrRecognizer);\r\n\r\n  function PanRecognizer() {\r\n    classCallCheck(this, PanRecognizer);\r\n\r\n    var _this = possibleConstructorReturn(this, (PanRecognizer.__proto__ || Object.getPrototypeOf(PanRecognizer)).apply(this, arguments));\r\n\r\n    _this.pX = null;\r\n    _this.pY = null;\r\n    return _this;\r\n  }\r\n\r\n  createClass(PanRecognizer, [{\r\n    key: 'getTouchAction',\r\n    value: function getTouchAction() {\r\n      var direction = this.options.direction;\r\n\r\n      var actions = [];\r\n      if (direction & DIRECTION_HORIZONTAL) {\r\n        actions.push(TOUCH_ACTION_PAN_Y);\r\n      }\r\n      if (direction & DIRECTION_VERTICAL) {\r\n        actions.push(TOUCH_ACTION_PAN_X);\r\n      }\r\n      return actions;\r\n    }\r\n  }, {\r\n    key: 'directionTest',\r\n    value: function directionTest(input) {\r\n      var options = this.options;\r\n\r\n      var hasMoved = true;\r\n      var distance = input.distance;\r\n      var direction = input.direction;\r\n\r\n      var x = input.deltaX;\r\n      var y = input.deltaY;\r\n\r\n      // lock to axis?\r\n      if (!(direction & options.direction)) {\r\n        if (options.direction & DIRECTION_HORIZONTAL) {\r\n          direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n          hasMoved = x !== this.pX;\r\n          distance = Math.abs(input.deltaX);\r\n        } else {\r\n          direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\r\n          hasMoved = y !== this.pY;\r\n          distance = Math.abs(input.deltaY);\r\n        }\r\n      }\r\n      input.direction = direction;\r\n      return hasMoved && distance > options.threshold && direction & options.direction;\r\n    }\r\n  }, {\r\n    key: 'attrTest',\r\n    value: function attrTest(input) {\r\n      return AttrRecognizer.prototype.attrTest.call(this, input) && ( // replace with a super call\r\n      this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));\r\n    }\r\n  }, {\r\n    key: 'emit',\r\n    value: function emit(input) {\r\n\r\n      this.pX = input.deltaX;\r\n      this.pY = input.deltaY;\r\n\r\n      var direction = directionStr(input.direction);\r\n\r\n      if (direction) {\r\n        input.additionalEvent = this.options.event + direction;\r\n      }\r\n      get(PanRecognizer.prototype.__proto__ || Object.getPrototypeOf(PanRecognizer.prototype), 'emit', this).call(this, input);\r\n    }\r\n  }]);\r\n  return PanRecognizer;\r\n}(AttrRecognizer);\r\n\r\nPanRecognizer.prototype.defaults = {\r\n  event: 'pan',\r\n  threshold: 10,\r\n  pointers: 1,\r\n  direction: DIRECTION_ALL\r\n};\r\n\r\n/**\r\n * @private\r\n * Swipe\r\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\n\r\nvar SwipeRecognizer = function (_AttrRecognizer) {\r\n  inherits(SwipeRecognizer, _AttrRecognizer);\r\n\r\n  function SwipeRecognizer() {\r\n    classCallCheck(this, SwipeRecognizer);\r\n    return possibleConstructorReturn(this, (SwipeRecognizer.__proto__ || Object.getPrototypeOf(SwipeRecognizer)).apply(this, arguments));\r\n  }\r\n\r\n  createClass(SwipeRecognizer, [{\r\n    key: 'getTouchAction',\r\n    value: function getTouchAction() {\r\n      return PanRecognizer.prototype.getTouchAction.call(this);\r\n    }\r\n  }, {\r\n    key: 'attrTest',\r\n    value: function attrTest(input) {\r\n      var direction = this.options.direction;\r\n\r\n      var velocity = void 0;\r\n\r\n      if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\r\n        velocity = input.overallVelocity;\r\n      } else if (direction & DIRECTION_HORIZONTAL) {\r\n        velocity = input.overallVelocityX;\r\n      } else if (direction & DIRECTION_VERTICAL) {\r\n        velocity = input.overallVelocityY;\r\n      }\r\n\r\n      return get(SwipeRecognizer.prototype.__proto__ || Object.getPrototypeOf(SwipeRecognizer.prototype), 'attrTest', this).call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\r\n    }\r\n  }, {\r\n    key: 'emit',\r\n    value: function emit(input) {\r\n      var direction = directionStr(input.offsetDirection);\r\n      if (direction) {\r\n        this.manager.emit(this.options.event + direction, input);\r\n      }\r\n\r\n      this.manager.emit(this.options.event, input);\r\n    }\r\n  }]);\r\n  return SwipeRecognizer;\r\n}(AttrRecognizer);\r\n\r\nSwipeRecognizer.prototype.defaults = {\r\n  event: 'swipe',\r\n  threshold: 10,\r\n  velocity: 0.3,\r\n  direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\r\n  pointers: 1\r\n};\r\n\r\n/**\r\n * @private\r\n * simple function bind\r\n * @param {Function} fn\r\n * @param {Object} context\r\n * @returns {Function}\r\n */\r\nfunction bindFn(fn, context) {\r\n  return function boundFn() {\r\n    return fn.apply(context, arguments);\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n * set a timeout with a given scope\r\n * @param {Function} fn\r\n * @param {Number} timeout\r\n * @param {Object} context\r\n * @returns {number}\r\n */\r\nfunction setTimeoutContext(fn, timeout, context) {\r\n  return setTimeout(bindFn(fn, context), timeout);\r\n}\r\n\r\n/**\r\n * @private\r\n * calculate the absolute distance between two points\r\n * @param {Object} p1 {x, y}\r\n * @param {Object} p2 {x, y}\r\n * @param {Array} [props] containing x and y keys\r\n * @return {Number} distance\r\n */\r\nfunction getDistance(p1, p2, props) {\r\n  if (!props) {\r\n    props = PROPS_XY;\r\n  }\r\n  var x = p2[props[0]] - p1[props[0]];\r\n  var y = p2[props[1]] - p1[props[1]];\r\n\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * @private\r\n * A tap is recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\r\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\r\n * a single tap.\r\n *\r\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\r\n * multi-taps being recognized.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\n\r\nvar TapRecognizer = function (_Recognizer) {\r\n  inherits(TapRecognizer, _Recognizer);\r\n\r\n  function TapRecognizer() {\r\n    classCallCheck(this, TapRecognizer);\r\n\r\n    // previous time and center,\r\n    // used for tap counting\r\n    var _this = possibleConstructorReturn(this, (TapRecognizer.__proto__ || Object.getPrototypeOf(TapRecognizer)).apply(this, arguments));\r\n\r\n    _this.pTime = false;\r\n    _this.pCenter = false;\r\n\r\n    _this._timer = null;\r\n    _this._input = null;\r\n    _this.count = 0;\r\n    return _this;\r\n  }\r\n\r\n  createClass(TapRecognizer, [{\r\n    key: 'getTouchAction',\r\n    value: function getTouchAction() {\r\n      return [TOUCH_ACTION_MANIPULATION];\r\n    }\r\n  }, {\r\n    key: 'process',\r\n    value: function process(input) {\r\n      var _this2 = this;\r\n\r\n      var options = this.options;\r\n\r\n\r\n      var validPointers = input.pointers.length === options.pointers;\r\n      var validMovement = input.distance < options.threshold;\r\n      var validTouchTime = input.deltaTime < options.time;\r\n\r\n      this.reset();\r\n\r\n      if (input.eventType & INPUT_START && this.count === 0) {\r\n        return this.failTimeout();\r\n      }\r\n\r\n      // we only allow little movement\r\n      // and we've reached an end event, so a tap is possible\r\n      if (validMovement && validTouchTime && validPointers) {\r\n        if (input.eventType !== INPUT_END) {\r\n          return this.failTimeout();\r\n        }\r\n\r\n        var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;\r\n        var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\r\n\r\n        this.pTime = input.timeStamp;\r\n        this.pCenter = input.center;\r\n\r\n        if (!validMultiTap || !validInterval) {\r\n          this.count = 1;\r\n        } else {\r\n          this.count += 1;\r\n        }\r\n\r\n        this._input = input;\r\n\r\n        // if tap count matches we have recognized it,\r\n        // else it has began recognizing...\r\n        var tapCount = this.count % options.taps;\r\n        if (tapCount === 0) {\r\n          // no failing requirements, immediately trigger the tap event\r\n          // or wait as long as the multitap interval to trigger\r\n          if (!this.hasRequireFailures()) {\r\n            return STATE_RECOGNIZED;\r\n          } else {\r\n            this._timer = setTimeoutContext(function () {\r\n              _this2.state = STATE_RECOGNIZED;\r\n              _this2.tryEmit();\r\n            }, options.interval, this);\r\n            return STATE_BEGAN;\r\n          }\r\n        }\r\n      }\r\n      return STATE_FAILED;\r\n    }\r\n  }, {\r\n    key: 'failTimeout',\r\n    value: function failTimeout() {\r\n      var _this3 = this;\r\n\r\n      this._timer = setTimeoutContext(function () {\r\n        _this3.state = STATE_FAILED;\r\n      }, this.options.interval, this);\r\n      return STATE_FAILED;\r\n    }\r\n  }, {\r\n    key: 'reset',\r\n    value: function reset() {\r\n      clearTimeout(this._timer);\r\n    }\r\n  }, {\r\n    key: 'emit',\r\n    value: function emit() {\r\n      if (this.state === STATE_RECOGNIZED) {\r\n        this._input.tapCount = this.count;\r\n        this.manager.emit(this.options.event, this._input);\r\n      }\r\n    }\r\n  }]);\r\n  return TapRecognizer;\r\n}(Recognizer);\r\n\r\nTapRecognizer.prototype.defaults = {\r\n  event: 'tap',\r\n  pointers: 1,\r\n  taps: 1,\r\n  interval: 300, // max time between the multi-tap taps\r\n  time: 250, // max time of the pointer to be down (like finger on the screen)\r\n  threshold: 9, // a minimal movement is ok, but keep it low\r\n  posThreshold: 10 // a multi-tap can be a bit off the initial position\r\n};\r\n\r\n/**\r\n * @private\r\n * Press\r\n * Recognized when the pointer is down for x ms without any movement.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\n\r\nvar PressRecognizer = function (_Recognizer) {\r\n  inherits(PressRecognizer, _Recognizer);\r\n\r\n  function PressRecognizer() {\r\n    classCallCheck(this, PressRecognizer);\r\n\r\n    var _this = possibleConstructorReturn(this, (PressRecognizer.__proto__ || Object.getPrototypeOf(PressRecognizer)).apply(this, arguments));\r\n\r\n    _this._timer = null;\r\n    _this._input = null;\r\n    return _this;\r\n  }\r\n\r\n  createClass(PressRecognizer, [{\r\n    key: 'getTouchAction',\r\n    value: function getTouchAction() {\r\n      return [TOUCH_ACTION_AUTO];\r\n    }\r\n  }, {\r\n    key: 'process',\r\n    value: function process(input) {\r\n      var _this2 = this;\r\n\r\n      var options = this.options;\r\n\r\n      var validPointers = input.pointers.length === options.pointers;\r\n      var validMovement = input.distance < options.threshold;\r\n      var validTime = input.deltaTime > options.time;\r\n\r\n      this._input = input;\r\n\r\n      // we only allow little movement\r\n      // and we've reached an end event, so a tap is possible\r\n      if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {\r\n        this.reset();\r\n      } else if (input.eventType & INPUT_START) {\r\n        this.reset();\r\n        this._timer = setTimeoutContext(function () {\r\n          _this2.state = STATE_RECOGNIZED;\r\n          _this2.tryEmit();\r\n        }, options.time, this);\r\n      } else if (input.eventType & INPUT_END) {\r\n        return STATE_RECOGNIZED;\r\n      }\r\n      return STATE_FAILED;\r\n    }\r\n  }, {\r\n    key: 'reset',\r\n    value: function reset() {\r\n      clearTimeout(this._timer);\r\n    }\r\n  }, {\r\n    key: 'emit',\r\n    value: function emit(input) {\r\n      if (this.state !== STATE_RECOGNIZED) {\r\n        return;\r\n      }\r\n\r\n      if (input && input.eventType & INPUT_END) {\r\n        this.manager.emit(this.options.event + 'up', input);\r\n      } else {\r\n        this._input.timeStamp = now();\r\n        this.manager.emit(this.options.event, this._input);\r\n      }\r\n    }\r\n  }]);\r\n  return PressRecognizer;\r\n}(Recognizer);\r\n\r\nPressRecognizer.prototype.defaults = {\r\n  event: 'press',\r\n  pointers: 1,\r\n  time: 251, // minimal time of the pointer to be pressed\r\n  threshold: 9 // a minimal movement is ok, but keep it low\r\n};\r\n\r\n/**\r\n * @private\r\n * small indexOf wrapper\r\n * @param {String} str\r\n * @param {String} find\r\n * @returns {Boolean} found\r\n */\r\nfunction inStr(str, find) {\r\n  return str.indexOf(find) > -1;\r\n}\r\n\r\n/**\r\n * @private\r\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\r\n * @param {String} actions\r\n * @returns {*}\r\n */\r\nfunction cleanTouchActions(actions) {\r\n  // none\r\n  if (inStr(actions, TOUCH_ACTION_NONE)) {\r\n    return TOUCH_ACTION_NONE;\r\n  }\r\n\r\n  var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\r\n  var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\r\n\r\n  // if both pan-x and pan-y are set (different recognizers\r\n  // for different directions, e.g. horizontal pan but vertical swipe?)\r\n  // we need none (as otherwise with pan-x pan-y combined none of these\r\n  // recognizers will work, since the browser would handle all panning\r\n  if (hasPanX && hasPanY) {\r\n    return TOUCH_ACTION_NONE;\r\n  }\r\n\r\n  // pan-x OR pan-y\r\n  if (hasPanX || hasPanY) {\r\n    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\r\n  }\r\n\r\n  // manipulation\r\n  if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\r\n    return TOUCH_ACTION_MANIPULATION;\r\n  }\r\n\r\n  return TOUCH_ACTION_AUTO;\r\n}\r\n\r\n/**\r\n * @private\r\n * Touch Action\r\n * sets the touchAction property or uses the js alternative\r\n * @param {Manager} manager\r\n * @param {String} value\r\n * @constructor\r\n */\r\n\r\nvar TouchAction = function () {\r\n  function TouchAction(manager, value) {\r\n    classCallCheck(this, TouchAction);\r\n\r\n    this.manager = manager;\r\n    this.set(value);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * set the touchAction value on the element or enable the polyfill\r\n   * @param {String} value\r\n   */\r\n\r\n\r\n  createClass(TouchAction, [{\r\n    key: 'set',\r\n    value: function set(value) {\r\n      // find out the touch-action by the event handlers\r\n      if (value === TOUCH_ACTION_COMPUTE) {\r\n        value = this.compute();\r\n      }\r\n\r\n      if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\r\n        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\r\n      }\r\n      this.actions = value.toLowerCase().trim();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * just re-set the touchAction value\r\n     */\r\n\r\n  }, {\r\n    key: 'update',\r\n    value: function update() {\r\n      this.set(this.manager.options.touchAction);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * compute the value for the touchAction property based on the recognizer's settings\r\n     * @returns {String} value\r\n     */\r\n\r\n  }, {\r\n    key: 'compute',\r\n    value: function compute() {\r\n      var actions = [];\r\n      each(this.manager.recognizers, function (recognizer) {\r\n        if (boolOrFn(recognizer.options.enable, [recognizer])) {\r\n          actions = actions.concat(recognizer.getTouchAction());\r\n        }\r\n      });\r\n      return cleanTouchActions(actions.join(' '));\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * this method is called on each input cycle and provides the preventing of the browser behavior\r\n     * @param {Object} input\r\n     */\r\n\r\n  }, {\r\n    key: 'preventDefaults',\r\n    value: function preventDefaults(input) {\r\n      var srcEvent = input.srcEvent;\r\n\r\n      var direction = input.offsetDirection;\r\n\r\n      // if the touch action did prevented once this session\r\n      if (this.manager.session.prevented) {\r\n        srcEvent.preventDefault();\r\n        return;\r\n      }\r\n\r\n      var actions = this.actions;\r\n\r\n      var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\r\n      var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\r\n      var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\r\n\r\n      if (hasNone) {\r\n        // do not prevent defaults if this is a tap gesture\r\n        var isTapPointer = input.pointers.length === 1;\r\n        var isTapMovement = input.distance < 2;\r\n        var isTapTouchTime = input.deltaTime < 250;\r\n\r\n        if (isTapPointer && isTapMovement && isTapTouchTime) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (hasPanX && hasPanY) {\r\n        // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\r\n        return;\r\n      }\r\n\r\n      if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {\r\n        return this.preventSrc(srcEvent);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\r\n     * @param {Object} srcEvent\r\n     */\r\n\r\n  }, {\r\n    key: 'preventSrc',\r\n    value: function preventSrc(srcEvent) {\r\n      this.manager.session.prevented = true;\r\n      srcEvent.preventDefault();\r\n    }\r\n  }]);\r\n  return TouchAction;\r\n}();\r\n\r\n/**\r\n * @private\r\n * find if a node is in the given parent\r\n * @method hasParent\r\n * @param {HTMLElement} node\r\n * @param {HTMLElement} parent\r\n * @return {Boolean} found\r\n */\r\nfunction hasParent(node, parent) {\r\n  while (node) {\r\n    if (node === parent) {\r\n      return true;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @private\r\n * get the center of all the pointers\r\n * @param {Array} pointers\r\n * @return {Object} center contains `x` and `y` properties\r\n */\r\nfunction getCenter(pointers) {\r\n  var pointersLength = pointers.length;\r\n\r\n  // no need to loop when only one touch\r\n  if (pointersLength === 1) {\r\n    return {\r\n      x: round(pointers[0].clientX),\r\n      y: round(pointers[0].clientY)\r\n    };\r\n  }\r\n\r\n  var x = 0;\r\n  var y = 0;\r\n  var i = 0;\r\n  while (i < pointersLength) {\r\n    x += pointers[i].clientX;\r\n    y += pointers[i].clientY;\r\n    i++;\r\n  }\r\n\r\n  return {\r\n    x: round(x / pointersLength),\r\n    y: round(y / pointersLength)\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n * create a simple clone from the input used for storage of firstInput and firstMultiple\r\n * @param {Object} input\r\n * @returns {Object} clonedInputData\r\n */\r\nfunction simpleCloneInputData(input) {\r\n  // make a simple copy of the pointers because we will get a reference if we don't\r\n  // we only need clientXY for the calculations\r\n  var pointers = [];\r\n  var i = 0;\r\n  while (i < input.pointers.length) {\r\n    pointers[i] = {\r\n      clientX: round(input.pointers[i].clientX),\r\n      clientY: round(input.pointers[i].clientY)\r\n    };\r\n    i++;\r\n  }\r\n\r\n  return {\r\n    timeStamp: now(),\r\n    pointers: pointers,\r\n    center: getCenter(pointers),\r\n    deltaX: input.deltaX,\r\n    deltaY: input.deltaY\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n * calculate the angle between two coordinates\r\n * @param {Object} p1\r\n * @param {Object} p2\r\n * @param {Array} [props] containing x and y keys\r\n * @return {Number} angle\r\n */\r\nfunction getAngle(p1, p2, props) {\r\n  if (!props) {\r\n    props = PROPS_XY;\r\n  }\r\n  var x = p2[props[0]] - p1[props[0]];\r\n  var y = p2[props[1]] - p1[props[1]];\r\n  return Math.atan2(y, x) * 180 / Math.PI;\r\n}\r\n\r\n/**\r\n * @private\r\n * get the direction between two points\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Number} direction\r\n */\r\nfunction getDirection(x, y) {\r\n  if (x === y) {\r\n    return DIRECTION_NONE;\r\n  }\r\n\r\n  if (abs(x) >= abs(y)) {\r\n    return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n  }\r\n  return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\r\n}\r\n\r\nfunction computeDeltaXY(session, input) {\r\n  var center = input.center;\r\n  // let { offsetDelta:offset = {}, prevDelta = {}, prevInput = {} } = session;\r\n  // jscs throwing error on defalut destructured values and without defaults tests fail\r\n\r\n  var offset = session.offsetDelta || {};\r\n  var prevDelta = session.prevDelta || {};\r\n  var prevInput = session.prevInput || {};\r\n\r\n  if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\r\n    prevDelta = session.prevDelta = {\r\n      x: prevInput.deltaX || 0,\r\n      y: prevInput.deltaY || 0\r\n    };\r\n\r\n    offset = session.offsetDelta = {\r\n      x: center.x,\r\n      y: center.y\r\n    };\r\n  }\r\n\r\n  input.deltaX = prevDelta.x + (center.x - offset.x);\r\n  input.deltaY = prevDelta.y + (center.y - offset.y);\r\n}\r\n\r\n/**\r\n * @private\r\n * calculate the velocity between two points. unit is in px per ms.\r\n * @param {Number} deltaTime\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Object} velocity `x` and `y`\r\n */\r\nfunction getVelocity(deltaTime, x, y) {\r\n  return {\r\n    x: x / deltaTime || 0,\r\n    y: y / deltaTime || 0\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n * calculate the scale factor between two pointersets\r\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\r\n * @param {Array} start array of pointers\r\n * @param {Array} end array of pointers\r\n * @return {Number} scale\r\n */\r\nfunction getScale(start, end) {\r\n  return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\r\n}\r\n\r\n/**\r\n * @private\r\n * calculate the rotation degrees between two pointersets\r\n * @param {Array} start array of pointers\r\n * @param {Array} end array of pointers\r\n * @return {Number} rotation\r\n */\r\nfunction getRotation(start, end) {\r\n  return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\r\n}\r\n\r\n/**\r\n * @private\r\n * velocity is calculated every x ms\r\n * @param {Object} session\r\n * @param {Object} input\r\n */\r\nfunction computeIntervalInputData(session, input) {\r\n  var last = session.lastInterval || input;\r\n  var deltaTime = input.timeStamp - last.timeStamp;\r\n  var velocity = void 0;\r\n  var velocityX = void 0;\r\n  var velocityY = void 0;\r\n  var direction = void 0;\r\n\r\n  if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\r\n    var deltaX = input.deltaX - last.deltaX;\r\n    var deltaY = input.deltaY - last.deltaY;\r\n\r\n    var v = getVelocity(deltaTime, deltaX, deltaY);\r\n    velocityX = v.x;\r\n    velocityY = v.y;\r\n    velocity = abs(v.x) > abs(v.y) ? v.x : v.y;\r\n    direction = getDirection(deltaX, deltaY);\r\n\r\n    session.lastInterval = input;\r\n  } else {\r\n    // use latest velocity info if it doesn't overtake a minimum period\r\n    velocity = last.velocity;\r\n    velocityX = last.velocityX;\r\n    velocityY = last.velocityY;\r\n    direction = last.direction;\r\n  }\r\n\r\n  input.velocity = velocity;\r\n  input.velocityX = velocityX;\r\n  input.velocityY = velocityY;\r\n  input.direction = direction;\r\n}\r\n\r\n/**\r\n* @private\r\n * extend the data with some usable properties like scale, rotate, velocity etc\r\n * @param {Object} manager\r\n * @param {Object} input\r\n */\r\nfunction computeInputData(manager, input) {\r\n  var session = manager.session;\r\n  var pointers = input.pointers;\r\n  var pointersLength = pointers.length;\r\n\r\n  // store the first input to calculate the distance and direction\r\n\r\n  if (!session.firstInput) {\r\n    session.firstInput = simpleCloneInputData(input);\r\n  }\r\n\r\n  // to compute scale and rotation we need to store the multiple touches\r\n  if (pointersLength > 1 && !session.firstMultiple) {\r\n    session.firstMultiple = simpleCloneInputData(input);\r\n  } else if (pointersLength === 1) {\r\n    session.firstMultiple = false;\r\n  }\r\n\r\n  var firstInput = session.firstInput;\r\n  var firstMultiple = session.firstMultiple;\r\n\r\n  var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\r\n\r\n  var center = input.center = getCenter(pointers);\r\n  input.timeStamp = now();\r\n  input.deltaTime = input.timeStamp - firstInput.timeStamp;\r\n\r\n  input.angle = getAngle(offsetCenter, center);\r\n  input.distance = getDistance(offsetCenter, center);\r\n\r\n  computeDeltaXY(session, input);\r\n  input.offsetDirection = getDirection(input.deltaX, input.deltaY);\r\n\r\n  var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\r\n  input.overallVelocityX = overallVelocity.x;\r\n  input.overallVelocityY = overallVelocity.y;\r\n  input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\r\n\r\n  input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\r\n  input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\r\n\r\n  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\r\n\r\n  computeIntervalInputData(session, input);\r\n\r\n  // find the correct target\r\n  var target = manager.element;\r\n  if (hasParent(input.srcEvent.target, target)) {\r\n    target = input.srcEvent.target;\r\n  }\r\n  input.target = target;\r\n}\r\n\r\n/**\r\n * @private\r\n * handle input events\r\n * @param {Manager} manager\r\n * @param {String} eventType\r\n * @param {Object} input\r\n */\r\nfunction inputHandler(manager, eventType, input) {\r\n  var pointersLen = input.pointers.length;\r\n  var changedPointersLen = input.changedPointers.length;\r\n  var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;\r\n  var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;\r\n\r\n  input.isFirst = !!isFirst;\r\n  input.isFinal = !!isFinal;\r\n\r\n  if (isFirst) {\r\n    manager.session = {};\r\n  }\r\n\r\n  // source event is the normalized value of the domEvents\r\n  // like 'touchstart, mouseup, pointerdown'\r\n  input.eventType = eventType;\r\n\r\n  // compute scale, rotation etc\r\n  computeInputData(manager, input);\r\n\r\n  // emit secret event\r\n  manager.emit('hammer.input', input);\r\n\r\n  manager.recognize(input);\r\n  manager.session.prevInput = input;\r\n}\r\n\r\n/**\r\n * @private\r\n * split string on whitespace\r\n * @param {String} str\r\n * @returns {Array} words\r\n */\r\n\r\nfunction splitStr(str) {\r\n  return str.trim().split(/\\s+/g);\r\n}\r\n\r\n/**\r\n * @private\r\n * addEventListener with multiple events at once\r\n * @param {EventTarget} target\r\n * @param {String} types\r\n * @param {Function} handler\r\n */\r\nfunction addEventListeners(target, types, handler) {\r\n  each(splitStr(types), function (type) {\r\n    target.addEventListener(type, handler, false);\r\n  });\r\n}\r\n\r\n/**\r\n * @private\r\n * removeEventListener with multiple events at once\r\n * @param {EventTarget} target\r\n * @param {String} types\r\n * @param {Function} handler\r\n */\r\nfunction removeEventListeners(target, types, handler) {\r\n  each(splitStr(types), function (type) {\r\n    target.removeEventListener(type, handler, false);\r\n  });\r\n}\r\n\r\n/**\r\n * @private\r\n * get the window object of an element\r\n * @param {HTMLElement} element\r\n * @returns {DocumentView|Window}\r\n */\r\nfunction getWindowForElement(element) {\r\n  var doc = element.ownerDocument || element;\r\n  return doc.defaultView || doc.parentWindow || window;\r\n}\r\n\r\n/**\r\n * @private\r\n * create new input type manager\r\n * @param {Manager} manager\r\n * @param {Function} callback\r\n * @returns {Input}\r\n * @constructor\r\n */\r\n\r\nvar Input = function () {\r\n  function Input(manager, callback) {\r\n    classCallCheck(this, Input);\r\n\r\n    var self = this;\r\n    this.manager = manager;\r\n    this.callback = callback;\r\n    this.element = manager.element;\r\n    this.target = manager.options.inputTarget;\r\n\r\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\r\n    // so when disabled the input events are completely bypassed.\r\n    this.domHandler = function (ev) {\r\n      if (boolOrFn(manager.options.enable, [manager])) {\r\n        self.handler(ev);\r\n      }\r\n    };\r\n\r\n    this.init();\r\n  }\r\n  /**\r\n   * @private\r\n   * should handle the inputEvent data and trigger the callback\r\n   * @virtual\r\n   */\r\n\r\n\r\n  createClass(Input, [{\r\n    key: 'handler',\r\n    value: function handler() {}\r\n\r\n    /**\r\n     * @private\r\n     * bind the events\r\n     */\r\n\r\n  }, {\r\n    key: 'init',\r\n    value: function init() {\r\n      this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\r\n      this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\r\n      this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * unbind the events\r\n     */\r\n\r\n  }, {\r\n    key: 'destroy',\r\n    value: function destroy() {\r\n      this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\r\n      this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\r\n      this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\r\n    }\r\n  }]);\r\n  return Input;\r\n}();\r\n\r\nvar POINTER_INPUT_MAP = {\r\n  pointerdown: INPUT_START,\r\n  pointermove: INPUT_MOVE,\r\n  pointerup: INPUT_END,\r\n  pointercancel: INPUT_CANCEL,\r\n  pointerout: INPUT_CANCEL\r\n};\r\n\r\n// in IE10 the pointer types is defined as an enum\r\nvar IE10_POINTER_TYPE_ENUM = {\r\n  2: INPUT_TYPE_TOUCH,\r\n  3: INPUT_TYPE_PEN,\r\n  4: INPUT_TYPE_MOUSE,\r\n  5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\r\n};\r\n\r\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\r\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\r\n\r\n// IE10 has prefixed support, and case-sensitive\r\nif (window.MSPointerEvent && !window.PointerEvent) {\r\n  POINTER_ELEMENT_EVENTS = 'MSPointerDown';\r\n  POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\r\n}\r\n\r\n/**\r\n * @private\r\n * Pointer events input\r\n * @constructor\r\n * @extends Input\r\n */\r\n\r\nvar PointerEventInput = function (_Input) {\r\n  inherits(PointerEventInput, _Input);\r\n\r\n  function PointerEventInput() {\r\n    classCallCheck(this, PointerEventInput);\r\n\r\n    var _this = possibleConstructorReturn(this, (PointerEventInput.__proto__ || Object.getPrototypeOf(PointerEventInput)).apply(this, arguments));\r\n\r\n    _this.evEl = POINTER_ELEMENT_EVENTS;\r\n    _this.evWin = POINTER_WINDOW_EVENTS;\r\n\r\n    _this.store = _this.manager.session.pointerEvents = [];\r\n    return _this;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * handle mouse events\r\n   * @param {Object} ev\r\n   */\r\n\r\n\r\n  createClass(PointerEventInput, [{\r\n    key: 'handler',\r\n    value: function handler(ev) {\r\n      var store = this.store;\r\n\r\n      var removePointer = false;\r\n\r\n      var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\r\n      var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\r\n      var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\r\n\r\n      var isTouch = pointerType === INPUT_TYPE_TOUCH;\r\n\r\n      // get index of the event in the store\r\n      var storeIndex = inArray(store, ev.pointerId, 'pointerId');\r\n\r\n      // start and mouse must be down\r\n      if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\r\n        if (storeIndex < 0) {\r\n          store.push(ev);\r\n          storeIndex = store.length - 1;\r\n        }\r\n      } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\r\n        removePointer = true;\r\n      }\r\n\r\n      // it not found, so the pointer hasn't been down (so it's probably a hover)\r\n      if (storeIndex < 0) {\r\n        return;\r\n      }\r\n\r\n      // update the event in the store\r\n      store[storeIndex] = ev;\r\n\r\n      this.callback(this.manager, eventType, {\r\n        pointers: store,\r\n        changedPointers: [ev],\r\n        pointerType: pointerType,\r\n        srcEvent: ev\r\n      });\r\n\r\n      if (removePointer) {\r\n        // remove from the store\r\n        store.splice(storeIndex, 1);\r\n      }\r\n    }\r\n  }]);\r\n  return PointerEventInput;\r\n}(Input);\r\n\r\n/**\r\n * @private\r\n * convert array-like objects to real arrays\r\n * @param {Object} obj\r\n * @returns {Array}\r\n */\r\nfunction toArray$1(obj) {\r\n  return Array.prototype.slice.call(obj, 0);\r\n}\r\n\r\n/**\r\n * @private\r\n * unique array with objects based on a key (like 'id') or just by the array's value\r\n * @param {Array} src [{id:1},{id:2},{id:1}]\r\n * @param {String} [key]\r\n * @param {Boolean} [sort=False]\r\n * @returns {Array} [{id:1},{id:2}]\r\n */\r\nfunction uniqueArray(src, key, sort) {\r\n  var results = [];\r\n  var values = [];\r\n  var i = 0;\r\n\r\n  while (i < src.length) {\r\n    var val = key ? src[i][key] : src[i];\r\n    if (inArray(values, val) < 0) {\r\n      results.push(src[i]);\r\n    }\r\n    values[i] = val;\r\n    i++;\r\n  }\r\n\r\n  if (sort) {\r\n    if (!key) {\r\n      results = results.sort();\r\n    } else {\r\n      results = results.sort(function (a, b) {\r\n        return a[key] > b[key];\r\n      });\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nvar TOUCH_INPUT_MAP = {\r\n  touchstart: INPUT_START,\r\n  touchmove: INPUT_MOVE,\r\n  touchend: INPUT_END,\r\n  touchcancel: INPUT_CANCEL\r\n};\r\n\r\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\r\n\r\n/**\r\n * @private\r\n * Multi-user touch events input\r\n * @constructor\r\n * @extends Input\r\n */\r\n\r\nvar TouchInput = function (_Input) {\r\n  inherits(TouchInput, _Input);\r\n\r\n  function TouchInput() {\r\n    classCallCheck(this, TouchInput);\r\n\r\n    TouchInput.prototype.evTarget = TOUCH_TARGET_EVENTS;\r\n    TouchInput.prototype.targetIds = {};\r\n\r\n    var _this = possibleConstructorReturn(this, (TouchInput.__proto__ || Object.getPrototypeOf(TouchInput)).apply(this, arguments));\r\n\r\n    _this.evTarget = TOUCH_TARGET_EVENTS;\r\n    _this.targetIds = {};\r\n    return _this;\r\n  }\r\n\r\n  createClass(TouchInput, [{\r\n    key: 'handler',\r\n    value: function handler(ev) {\r\n      var type = TOUCH_INPUT_MAP[ev.type];\r\n      var touches = getTouches.call(this, ev, type);\r\n      if (!touches) {\r\n        return;\r\n      }\r\n\r\n      this.callback(this.manager, type, {\r\n        pointers: touches[0],\r\n        changedPointers: touches[1],\r\n        pointerType: INPUT_TYPE_TOUCH,\r\n        srcEvent: ev\r\n      });\r\n    }\r\n  }]);\r\n  return TouchInput;\r\n}(Input);\r\n\r\nfunction getTouches(ev, type) {\r\n  var allTouches = toArray$1(ev.touches);\r\n  var targetIds = this.targetIds;\r\n\r\n  // when there is only one touch, the process can be simplified\r\n\r\n  if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\r\n    targetIds[allTouches[0].identifier] = true;\r\n    return [allTouches, allTouches];\r\n  }\r\n\r\n  var i = void 0;\r\n  var targetTouches = void 0;\r\n  var changedTouches = toArray$1(ev.changedTouches);\r\n  var changedTargetTouches = [];\r\n  var target = this.target;\r\n\r\n  // get target touches from touches\r\n\r\n  targetTouches = allTouches.filter(function (touch) {\r\n    return hasParent(touch.target, target);\r\n  });\r\n\r\n  // collect touches\r\n  if (type === INPUT_START) {\r\n    i = 0;\r\n    while (i < targetTouches.length) {\r\n      targetIds[targetTouches[i].identifier] = true;\r\n      i++;\r\n    }\r\n  }\r\n\r\n  // filter changed touches to only contain touches that exist in the collected target ids\r\n  i = 0;\r\n  while (i < changedTouches.length) {\r\n    if (targetIds[changedTouches[i].identifier]) {\r\n      changedTargetTouches.push(changedTouches[i]);\r\n    }\r\n\r\n    // cleanup removed touches\r\n    if (type & (INPUT_END | INPUT_CANCEL)) {\r\n      delete targetIds[changedTouches[i].identifier];\r\n    }\r\n    i++;\r\n  }\r\n\r\n  if (!changedTargetTouches.length) {\r\n    return;\r\n  }\r\n\r\n  return [\r\n  // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\r\n  uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];\r\n}\r\n\r\nvar MOUSE_INPUT_MAP = {\r\n  mousedown: INPUT_START,\r\n  mousemove: INPUT_MOVE,\r\n  mouseup: INPUT_END\r\n};\r\n\r\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\r\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\r\n\r\n/**\r\n * @private\r\n * Mouse events input\r\n * @constructor\r\n * @extends Input\r\n */\r\n\r\nvar MouseInput = function (_Input) {\r\n  inherits(MouseInput, _Input);\r\n\r\n  function MouseInput() {\r\n    classCallCheck(this, MouseInput);\r\n\r\n    var _this = possibleConstructorReturn(this, (MouseInput.__proto__ || Object.getPrototypeOf(MouseInput)).apply(this, arguments));\r\n\r\n    _this.evEl = MOUSE_ELEMENT_EVENTS;\r\n    _this.evWin = MOUSE_WINDOW_EVENTS;\r\n\r\n    _this.pressed = false; // mousedown state\r\n    return _this;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * handle mouse events\r\n   * @param {Object} ev\r\n   */\r\n\r\n\r\n  createClass(MouseInput, [{\r\n    key: 'handler',\r\n    value: function handler(ev) {\r\n      var eventType = MOUSE_INPUT_MAP[ev.type];\r\n\r\n      // on start we want to have the left mouse button down\r\n      if (eventType & INPUT_START && ev.button === 0) {\r\n        this.pressed = true;\r\n      }\r\n\r\n      if (eventType & INPUT_MOVE && ev.which !== 1) {\r\n        eventType = INPUT_END;\r\n      }\r\n\r\n      // mouse must be down\r\n      if (!this.pressed) {\r\n        return;\r\n      }\r\n\r\n      if (eventType & INPUT_END) {\r\n        this.pressed = false;\r\n      }\r\n\r\n      this.callback(this.manager, eventType, {\r\n        pointers: [ev],\r\n        changedPointers: [ev],\r\n        pointerType: INPUT_TYPE_MOUSE,\r\n        srcEvent: ev\r\n      });\r\n    }\r\n  }]);\r\n  return MouseInput;\r\n}(Input);\r\n\r\n/**\r\n * @private\r\n * Combined touch and mouse input\r\n *\r\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\r\n * This because touch devices also emit mouse events while doing a touch.\r\n *\r\n * @constructor\r\n * @extends Input\r\n */\r\n\r\nvar DEDUP_TIMEOUT = 2500;\r\nvar DEDUP_DISTANCE = 25;\r\n\r\nvar TouchMouseInput = function (_Input) {\r\n  inherits(TouchMouseInput, _Input);\r\n\r\n  function TouchMouseInput() {\r\n    classCallCheck(this, TouchMouseInput);\r\n\r\n    var _this = possibleConstructorReturn(this, (TouchMouseInput.__proto__ || Object.getPrototypeOf(TouchMouseInput)).apply(this, arguments));\r\n\r\n    var handler = bindFn(_this.handler, _this);\r\n    _this.touch = new TouchInput(_this.manager, handler);\r\n    _this.mouse = new MouseInput(_this.manager, handler);\r\n\r\n    _this.primaryTouch = null;\r\n    _this.lastTouches = [];\r\n    return _this;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * handle mouse and touch events\r\n   * @param {Hammer} manager\r\n   * @param {String} inputEvent\r\n   * @param {Object} inputData\r\n   */\r\n\r\n\r\n  createClass(TouchMouseInput, [{\r\n    key: 'handler',\r\n    value: function handler(manager, inputEvent, inputData) {\r\n      var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;\r\n      var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;\r\n\r\n      if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\r\n        return;\r\n      }\r\n\r\n      // when we're in a touch event, record touches to  de-dupe synthetic mouse event\r\n      if (isTouch) {\r\n        recordTouches.call(this, inputEvent, inputData);\r\n      } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\r\n        return;\r\n      }\r\n\r\n      this.callback(manager, inputEvent, inputData);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * remove the event listeners\r\n     */\r\n\r\n  }, {\r\n    key: 'destroy',\r\n    value: function destroy() {\r\n      this.touch.destroy();\r\n      this.mouse.destroy();\r\n    }\r\n  }]);\r\n  return TouchMouseInput;\r\n}(Input);\r\n\r\nfunction recordTouches(eventType, eventData) {\r\n  if (eventType & INPUT_START) {\r\n    this.primaryTouch = eventData.changedPointers[0].identifier;\r\n    setLastTouch.call(this, eventData);\r\n  } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\r\n    setLastTouch.call(this, eventData);\r\n  }\r\n}\r\n\r\nfunction setLastTouch(eventData) {\r\n  var _this2 = this;\r\n\r\n  var _eventData$changedPoi = slicedToArray(eventData.changedPointers, 1);\r\n\r\n  var touch = _eventData$changedPoi[0];\r\n\r\n  if (touch.identifier === this.primaryTouch) {\r\n    (function () {\r\n      var lastTouch = { x: touch.clientX, y: touch.clientY };\r\n      _this2.lastTouches.push(lastTouch);\r\n      var lts = _this2.lastTouches;\r\n      var removeLastTouch = function removeLastTouch() {\r\n        var i = lts.indexOf(lastTouch);\r\n        if (i > -1) {\r\n          lts.splice(i, 1);\r\n        }\r\n      };\r\n      setTimeout(removeLastTouch, DEDUP_TIMEOUT);\r\n    })();\r\n  }\r\n}\r\n\r\nfunction isSyntheticEvent(eventData) {\r\n  var x = eventData.srcEvent.clientX;\r\n  var y = eventData.srcEvent.clientY;\r\n  for (var i = 0; i < this.lastTouches.length; i++) {\r\n    var t = this.lastTouches[i];\r\n    var dx = Math.abs(x - t.x);\r\n    var dy = Math.abs(y - t.y);\r\n    if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @private\r\n * create new input type manager\r\n * called by the Manager constructor\r\n * @param {Hammer} manager\r\n * @returns {Input}\r\n */\r\nfunction createInputInstance(manager) {\r\n  var Type = void 0;\r\n  // let inputClass = manager.options.inputClass;\r\n  var inputClass = manager.options.inputClass;\r\n\r\n  if (inputClass) {\r\n    Type = inputClass;\r\n  } else if (SUPPORT_POINTER_EVENTS) {\r\n    Type = PointerEventInput;\r\n  } else if (SUPPORT_ONLY_TOUCH) {\r\n    Type = TouchInput;\r\n  } else if (!SUPPORT_TOUCH) {\r\n    Type = MouseInput;\r\n  } else {\r\n    Type = TouchMouseInput;\r\n  }\r\n  return new Type(manager, inputHandler);\r\n}\r\n\r\nvar STOP = 1;\r\nvar FORCED_STOP = 2;\r\n\r\n/**\r\n* @private\r\n * Manager\r\n * @param {HTMLElement} element\r\n * @param {Object} [options]\r\n * @constructor\r\n */\r\n\r\nvar Manager = function () {\r\n  function Manager(element, options) {\r\n    var _this = this;\r\n\r\n    classCallCheck(this, Manager);\r\n\r\n    this.options = assign$1({}, Hammer.defaults, options || {});\r\n\r\n    this.options.inputTarget = this.options.inputTarget || element;\r\n\r\n    this.handlers = {};\r\n    this.session = {};\r\n    this.recognizers = [];\r\n    this.oldCssProps = {};\r\n\r\n    this.element = element;\r\n    this.input = createInputInstance(this);\r\n    this.touchAction = new TouchAction(this, this.options.touchAction);\r\n\r\n    toggleCssProps(this, true);\r\n\r\n    each(this.options.recognizers, function (item) {\r\n      var recognizer = _this.add(new item[0](item[1]));\r\n      item[2] && recognizer.recognizeWith(item[2]);\r\n      item[3] && recognizer.requireFailure(item[3]);\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * set options\r\n   * @param {Object} options\r\n   * @returns {Manager}\r\n   */\r\n\r\n\r\n  createClass(Manager, [{\r\n    key: 'set',\r\n    value: function set(options) {\r\n      assign$1(this.options, options);\r\n\r\n      // Options that need a little more setup\r\n      if (options.touchAction) {\r\n        this.touchAction.update();\r\n      }\r\n      if (options.inputTarget) {\r\n        // Clean up existing event listeners and reinitialize\r\n        this.input.destroy();\r\n        this.input.target = options.inputTarget;\r\n        this.input.init();\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * stop recognizing for this session.\r\n     * This session will be discarded, when a new [input]start event is fired.\r\n     * When forced, the recognizer cycle is stopped immediately.\r\n     * @param {Boolean} [force]\r\n     */\r\n\r\n  }, {\r\n    key: 'stop',\r\n    value: function stop(force) {\r\n      this.session.stopped = force ? FORCED_STOP : STOP;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * run the recognizers!\r\n     * called by the inputHandler function on every movement of the pointers (touches)\r\n     * it walks through all the recognizers and tries to detect the gesture that is being made\r\n     * @param {Object} inputData\r\n     */\r\n\r\n  }, {\r\n    key: 'recognize',\r\n    value: function recognize(inputData) {\r\n      var session = this.session;\r\n\r\n      if (session.stopped) {\r\n        return;\r\n      }\r\n\r\n      // run the touch-action polyfill\r\n      this.touchAction.preventDefaults(inputData);\r\n\r\n      var recognizer = void 0;\r\n      var recognizers = this.recognizers;\r\n\r\n      // this holds the recognizer that is being recognized.\r\n      // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\r\n      // if no recognizer is detecting a thing, it is set to `null`\r\n\r\n      var curRecognizer = session.curRecognizer;\r\n\r\n      // reset when the last recognizer is recognized\r\n      // or when we're in a new session\r\n\r\n      if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {\r\n        curRecognizer = session.curRecognizer = null;\r\n      }\r\n\r\n      var i = 0;\r\n      while (i < recognizers.length) {\r\n        recognizer = recognizers[i];\r\n\r\n        // find out if we are allowed try to recognize the input for this one.\r\n        // 1.   allow if the session is NOT forced stopped (see the .stop() method)\r\n        // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\r\n        //      that is being recognized.\r\n        // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\r\n        //      this can be setup with the `recognizeWith()` method on the recognizer.\r\n        if (session.stopped !== FORCED_STOP && ( // 1\r\n        !curRecognizer || recognizer === curRecognizer || // 2\r\n        recognizer.canRecognizeWith(curRecognizer))) {\r\n          // 3\r\n          recognizer.recognize(inputData);\r\n        } else {\r\n          recognizer.reset();\r\n        }\r\n\r\n        // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\r\n        // current active recognizer. but only if we don't already have an active recognizer\r\n        if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\r\n          curRecognizer = session.curRecognizer = recognizer;\r\n        }\r\n        i++;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * get a recognizer by its event name.\r\n     * @param {Recognizer|String} recognizer\r\n     * @returns {Recognizer|Null}\r\n     */\r\n\r\n  }, {\r\n    key: 'get',\r\n    value: function get(recognizer) {\r\n      if (recognizer instanceof Recognizer) {\r\n        return recognizer;\r\n      }\r\n\r\n      var recognizers = this.recognizers;\r\n\r\n      for (var i = 0; i < recognizers.length; i++) {\r\n        if (recognizers[i].options.event === recognizer) {\r\n          return recognizers[i];\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    /**\r\n     * @private add a recognizer to the manager\r\n     * existing recognizers with the same event name will be removed\r\n     * @param {Recognizer} recognizer\r\n     * @returns {Recognizer|Manager}\r\n     */\r\n\r\n  }, {\r\n    key: 'add',\r\n    value: function add(recognizer) {\r\n      if (invokeArrayArg(recognizer, 'add', this)) {\r\n        return this;\r\n      }\r\n\r\n      // remove existing\r\n      var existing = this.get(recognizer.options.event);\r\n      if (existing) {\r\n        this.remove(existing);\r\n      }\r\n\r\n      this.recognizers.push(recognizer);\r\n      recognizer.manager = this;\r\n\r\n      this.touchAction.update();\r\n      return recognizer;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * remove a recognizer by name or instance\r\n     * @param {Recognizer|String} recognizer\r\n     * @returns {Manager}\r\n     */\r\n\r\n  }, {\r\n    key: 'remove',\r\n    value: function remove(recognizer) {\r\n      if (invokeArrayArg(recognizer, 'remove', this)) {\r\n        return this;\r\n      }\r\n\r\n      recognizer = this.get(recognizer);\r\n\r\n      // let's make sure this recognizer exists\r\n      if (recognizer) {\r\n        var recognizers = this.recognizers;\r\n\r\n        var index = inArray(recognizers, recognizer);\r\n\r\n        if (index !== -1) {\r\n          recognizers.splice(index, 1);\r\n          this.touchAction.update();\r\n        }\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * bind event\r\n     * @param {String} events\r\n     * @param {Function} handler\r\n     * @returns {EventEmitter} this\r\n     */\r\n\r\n  }, {\r\n    key: 'on',\r\n    value: function on(events, handler) {\r\n      if (events === undefined) {\r\n        return;\r\n      }\r\n      if (handler === undefined) {\r\n        return;\r\n      }\r\n\r\n      var handlers = this.handlers;\r\n\r\n      each(splitStr(events), function (event) {\r\n        handlers[event] = handlers[event] || [];\r\n        handlers[event].push(handler);\r\n      });\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @private unbind event, leave emit blank to remove all handlers\r\n     * @param {String} events\r\n     * @param {Function} [handler]\r\n     * @returns {EventEmitter} this\r\n     */\r\n\r\n  }, {\r\n    key: 'off',\r\n    value: function off(events, handler) {\r\n      if (events === undefined) {\r\n        return;\r\n      }\r\n\r\n      var handlers = this.handlers;\r\n\r\n      each(splitStr(events), function (event) {\r\n        if (!handler) {\r\n          delete handlers[event];\r\n        } else {\r\n          handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\r\n        }\r\n      });\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @private emit event to the listeners\r\n     * @param {String} event\r\n     * @param {Object} data\r\n     */\r\n\r\n  }, {\r\n    key: 'emit',\r\n    value: function emit(event, data) {\r\n      // we also want to trigger dom events\r\n      if (this.options.domEvents) {\r\n        triggerDomEvent(event, data);\r\n      }\r\n\r\n      // no handlers, so skip it all\r\n      var handlers = this.handlers[event] && this.handlers[event].slice();\r\n      if (!handlers || !handlers.length) {\r\n        return;\r\n      }\r\n\r\n      data.type = event;\r\n      data.preventDefault = function () {\r\n        data.srcEvent.preventDefault();\r\n      };\r\n\r\n      var i = 0;\r\n      while (i < handlers.length) {\r\n        handlers[i](data);\r\n        i++;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * destroy the manager and unbinds all events\r\n     * it doesn't unbind dom events, that is the user own responsibility\r\n     */\r\n\r\n  }, {\r\n    key: 'destroy',\r\n    value: function destroy() {\r\n      this.element && toggleCssProps(this, false);\r\n\r\n      this.handlers = {};\r\n      this.session = {};\r\n      this.input.destroy();\r\n      this.element = null;\r\n    }\r\n  }]);\r\n  return Manager;\r\n}();\r\n\r\nfunction toggleCssProps(manager, add) {\r\n  var element = manager.element;\r\n\r\n  if (!element.style) {\r\n    return;\r\n  }\r\n  var prop = void 0;\r\n  each(manager.options.cssProps, function (value, name) {\r\n    prop = prefixed(element.style, name);\r\n    if (add) {\r\n      manager.oldCssProps[prop] = element.style[prop];\r\n      element.style[prop] = value;\r\n    } else {\r\n      element.style[prop] = manager.oldCssProps[prop] || '';\r\n    }\r\n  });\r\n  if (!add) {\r\n    manager.oldCssProps = {};\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * trigger dom event\r\n * @param {String} event\r\n * @param {Object} data\r\n */\r\nfunction triggerDomEvent(event, data) {\r\n  var gestureEvent = document.createEvent('Event');\r\n  gestureEvent.initEvent(event, true, true);\r\n  gestureEvent.gesture = data;\r\n  data.target.dispatchEvent(gestureEvent);\r\n}\r\n\r\n/**\r\n * @private\r\n * Simple way to create a manager with a default set of recognizers.\r\n * @param {HTMLElement} element\r\n * @param {Object} [options]\r\n * @constructor\r\n */\r\n\r\nvar Hammer = function Hammer(element, options) {\r\n  classCallCheck(this, Hammer);\r\n\r\n  options = options || {};\r\n  options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\r\n  return new Manager(element, options);\r\n};\r\n\r\nHammer.VERSION = '2.0.8';\r\n\r\n/**\r\n * @private\r\n * default settings\r\n * @namespace\r\n */\r\nHammer.defaults = {\r\n  /**\r\n   * @private\r\n   * set if DOM events are being triggered.\r\n   * But this is slower and unused by simple implementations, so disabled by default.\r\n   * @type {Boolean}\r\n   * @default false\r\n   */\r\n  domEvents: false,\r\n\r\n  /**\r\n   * @private\r\n   * The value for the touchAction property/fallback.\r\n   * When set to `compute` it will magically set the correct value based on the added recognizers.\r\n   * @type {String}\r\n   * @default compute\r\n   */\r\n  touchAction: TOUCH_ACTION_COMPUTE,\r\n\r\n  /**\r\n   * @private\r\n   * @type {Boolean}\r\n   * @default true\r\n   */\r\n  enable: true,\r\n\r\n  /**\r\n   * @private\r\n   * EXPERIMENTAL FEATURE -- can be removed/changed\r\n   * Change the parent input target element.\r\n   * If Null, then it is being set the to main element.\r\n   * @type {Null|EventTarget}\r\n   * @default null\r\n   */\r\n  inputTarget: null,\r\n\r\n  /**\r\n   * @private\r\n   * force an input class\r\n   * @type {Null|Function}\r\n   * @default null\r\n   */\r\n  inputClass: null,\r\n\r\n  /**\r\n   * @private\r\n   * Default recognizer setup when calling `Hammer()`\r\n   * When creating a new Manager these will be skipped.\r\n   * @type {Array}\r\n   */\r\n  preset: [\r\n  // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\r\n  [RotateRecognizer, { enable: false }], [PinchRecognizer, { enable: false }, ['rotate']], [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }], [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']], [TapRecognizer], [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']], [PressRecognizer]],\r\n\r\n  /**\r\n   * @private\r\n   * Some CSS properties can be used to improve the working of Hammer.\r\n   * Add them to this method and they will be set when creating a new Manager.\r\n   * @namespace\r\n   */\r\n  cssProps: {\r\n    /**\r\n     * @private\r\n     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\r\n     * @type {String}\r\n     * @default 'none'\r\n     */\r\n    userSelect: 'none',\r\n\r\n    /**\r\n     * @private\r\n     * Disable the Windows Phone grippers when pressing an element.\r\n     * @type {String}\r\n     * @default 'none'\r\n     */\r\n    touchSelect: 'none',\r\n\r\n    /**\r\n     * @private\r\n     * Disables the default callout shown when you touch and hold a touch target.\r\n     * On iOS, when you touch and hold a touch target such as a link, Safari displays\r\n     * a callout containing information about the link. This property allows you to disable that callout.\r\n     * @type {String}\r\n     * @default 'none'\r\n     */\r\n    touchCallout: 'none',\r\n\r\n    /**\r\n     * @private\r\n     * Specifies whether zooming is enabled. Used by IE10>\r\n     * @type {String}\r\n     * @default 'none'\r\n     */\r\n    contentZooming: 'none',\r\n\r\n    /**\r\n     * @private\r\n     * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\r\n     * @type {String}\r\n     * @default 'none'\r\n     */\r\n    userDrag: 'none',\r\n\r\n    /**\r\n     * @private\r\n     * Overrides the highlight color shown when the user taps a link or a JavaScript\r\n     * clickable element in iOS. This property obeys the alpha value, if specified.\r\n     * @type {String}\r\n     * @default 'rgba(0,0,0,0)'\r\n     */\r\n    tapHighlightColor: 'rgba(0,0,0,0)'\r\n  }\r\n};\r\n\r\nvar SINGLE_TOUCH_INPUT_MAP = {\r\n  touchstart: INPUT_START,\r\n  touchmove: INPUT_MOVE,\r\n  touchend: INPUT_END,\r\n  touchcancel: INPUT_CANCEL\r\n};\r\n\r\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\r\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\r\n\r\n/**\r\n * @private\r\n * Touch events input\r\n * @constructor\r\n * @extends Input\r\n */\r\n\r\nvar SingleTouchInput = function (_Input) {\r\n  inherits(SingleTouchInput, _Input);\r\n\r\n  function SingleTouchInput() {\r\n    classCallCheck(this, SingleTouchInput);\r\n\r\n    var _this = possibleConstructorReturn(this, (SingleTouchInput.__proto__ || Object.getPrototypeOf(SingleTouchInput)).apply(this, arguments));\r\n\r\n    _this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\r\n    _this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\r\n    _this.started = false;\r\n\r\n    Input.apply(_this, arguments);\r\n    return _this;\r\n  }\r\n\r\n  createClass(SingleTouchInput, [{\r\n    key: 'handler',\r\n    value: function handler(ev) {\r\n      var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\r\n\r\n      // should we handle the touch events?\r\n      if (type === INPUT_START) {\r\n        this.started = true;\r\n      }\r\n\r\n      if (!this.started) {\r\n        return;\r\n      }\r\n\r\n      var touches = normalizeSingleTouches.call(this, ev, type);\r\n\r\n      // when done, reset the started state\r\n      if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\r\n        this.started = false;\r\n      }\r\n\r\n      this.callback(this.manager, type, {\r\n        pointers: touches[0],\r\n        changedPointers: touches[1],\r\n        pointerType: INPUT_TYPE_TOUCH,\r\n        srcEvent: ev\r\n      });\r\n    }\r\n  }]);\r\n  return SingleTouchInput;\r\n}(Input);\r\n\r\nfunction normalizeSingleTouches(ev, type) {\r\n  var all = toArray$1(ev.touches);\r\n  var changed = toArray$1(ev.changedTouches);\r\n\r\n  if (type & (INPUT_END | INPUT_CANCEL)) {\r\n    all = uniqueArray(all.concat(changed), 'identifier', true);\r\n  }\r\n\r\n  return [all, changed];\r\n}\r\n\r\n/**\r\n * @private\r\n * wrap a method with a deprecation warning and stack trace\r\n * @param {Function} method\r\n * @param {String} name\r\n * @param {String} message\r\n * @returns {Function} A new function wrapping the supplied method.\r\n */\r\nfunction deprecate(method, name, message) {\r\n  var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\r\n  return function () {\r\n    var e = new Error('get-stack-trace');\r\n    var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\r\n\r\n    var log = window.console && (window.console.warn || window.console.log);\r\n    if (log) {\r\n      log.call(window.console, deprecationMessage, stack);\r\n    }\r\n    return method.apply(this, arguments);\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n * extend object.\r\n * means that properties in dest will be overwritten by the ones in src.\r\n * @param {Object} dest\r\n * @param {Object} src\r\n * @param {Boolean} [merge=false]\r\n * @returns {Object} dest\r\n */\r\nvar extend = deprecate(function (dest, src, merge) {\r\n  var keys = Object.keys(src);\r\n  var i = 0;\r\n  while (i < keys.length) {\r\n    if (!merge || merge && dest[keys[i]] === undefined) {\r\n      dest[keys[i]] = src[keys[i]];\r\n    }\r\n    i++;\r\n  }\r\n  return dest;\r\n}, 'extend', 'Use `assign`.');\r\n\r\n/**\r\n * @private\r\n * merge the values from src in the dest.\r\n * means that properties that exist in dest will not be overwritten by src\r\n * @param {Object} dest\r\n * @param {Object} src\r\n * @returns {Object} dest\r\n */\r\nvar merge = deprecate(function (dest, src) {\r\n  return extend(dest, src, true);\r\n}, 'merge', 'Use `assign`.');\r\n\r\n/**\r\n * @private\r\n * simple class inheritance\r\n * @param {Function} child\r\n * @param {Function} base\r\n * @param {Object} [properties]\r\n */\r\nfunction inherit(child, base, properties) {\r\n  var baseP = base.prototype;\r\n  var childP = void 0;\r\n\r\n  childP = child.prototype = Object.create(baseP);\r\n  childP.constructor = child;\r\n  childP._super = baseP;\r\n\r\n  if (properties) {\r\n    assign$1(childP, properties);\r\n  }\r\n}\r\n\r\n// this prevents errors when Hammer is loaded in the presence of an AMD\r\n//  style loader but by script tag, not by the loader.\r\n\r\nassign$1(Hammer, {\r\n  INPUT_START: INPUT_START,\r\n  INPUT_MOVE: INPUT_MOVE,\r\n  INPUT_END: INPUT_END,\r\n  INPUT_CANCEL: INPUT_CANCEL,\r\n\r\n  STATE_POSSIBLE: STATE_POSSIBLE,\r\n  STATE_BEGAN: STATE_BEGAN,\r\n  STATE_CHANGED: STATE_CHANGED,\r\n  STATE_ENDED: STATE_ENDED,\r\n  STATE_RECOGNIZED: STATE_RECOGNIZED,\r\n  STATE_CANCELLED: STATE_CANCELLED,\r\n  STATE_FAILED: STATE_FAILED,\r\n\r\n  DIRECTION_NONE: DIRECTION_NONE,\r\n  DIRECTION_LEFT: DIRECTION_LEFT,\r\n  DIRECTION_RIGHT: DIRECTION_RIGHT,\r\n  DIRECTION_UP: DIRECTION_UP,\r\n  DIRECTION_DOWN: DIRECTION_DOWN,\r\n  DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\r\n  DIRECTION_VERTICAL: DIRECTION_VERTICAL,\r\n  DIRECTION_ALL: DIRECTION_ALL,\r\n\r\n  Manager: Manager,\r\n  Input: Input,\r\n  TouchAction: TouchAction,\r\n\r\n  TouchInput: TouchInput,\r\n  MouseInput: MouseInput,\r\n  PointerEventInput: PointerEventInput,\r\n  TouchMouseInput: TouchMouseInput,\r\n  SingleTouchInput: SingleTouchInput,\r\n\r\n  Recognizer: Recognizer,\r\n  AttrRecognizer: AttrRecognizer,\r\n  Tap: TapRecognizer,\r\n  Pan: PanRecognizer,\r\n  Swipe: SwipeRecognizer,\r\n  Pinch: PinchRecognizer,\r\n  Rotate: RotateRecognizer,\r\n  Press: PressRecognizer,\r\n\r\n  on: addEventListeners,\r\n  off: removeEventListeners,\r\n  each: each,\r\n  merge: merge,\r\n  extend: extend,\r\n  assign: assign$1,\r\n  inherit: inherit,\r\n  bindFn: bindFn,\r\n  prefixed: prefixed,\r\n  toArray: toArray$1,\r\n  inArray: inArray,\r\n  uniqueArray: uniqueArray,\r\n  splitStr: splitStr,\r\n  boolOrFn: boolOrFn,\r\n  hasParent: hasParent,\r\n  addEventListeners: addEventListeners,\r\n  removeEventListeners: removeEventListeners\r\n});\r\n\r\n/* jshint ignore:start */\r\nif (true) {\r\n  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\r\n    return Hammer;\r\n  }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n} else {}\r\n/* jshint ignore:end */\r\n})(window, document, 'Hammer');\r\n\n\n//# sourceURL=webpack:///./node_modules/hammerjs/hammer.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ })

/******/ });